// Generated by rstantools.  Do not edit by hand.

/*
    tipsae is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    tipsae is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with tipsae.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_global_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 86, column 0 to column 35)",
                                                      " (in 'string', line 87, column 0 to column 17)",
                                                      " (in 'string', line 89, column 2 to column 52)",
                                                      " (in 'string', line 90, column 2 to column 49)",
                                                      " (in 'string', line 91, column 2 to column 50)",
                                                      " (in 'string', line 94, column 0 to column 23)",
                                                      " (in 'string', line 96, column 4 to column 96)",
                                                      " (in 'string', line 98, column 4 to column 72)",
                                                      " (in 'string', line 100, column 4 to column 82)",
                                                      " (in 'string', line 101, column 4 to column 76)",
                                                      " (in 'string', line 104, column 0 to column 35)",
                                                      " (in 'string', line 105, column 0 to column 46)",
                                                      " (in 'string', line 107, column 0 to column 61)",
                                                      " (in 'string', line 108, column 0 to column 47)",
                                                      " (in 'string', line 112, column 0 to column 55)",
                                                      " (in 'string', line 113, column 0 to column 55)",
                                                      " (in 'string', line 115, column 0 to column 57)",
                                                      " (in 'string', line 116, column 0 to column 57)",
                                                      " (in 'string', line 117, column 0 to column 74)",
                                                      " (in 'string', line 118, column 0 to column 74)",
                                                      " (in 'string', line 123, column 0 to column 15)",
                                                      " (in 'string', line 125, column 2 to column 44)",
                                                      " (in 'string', line 126, column 2 to column 43)",
                                                      " (in 'string', line 127, column 2 to column 53)",
                                                      " (in 'string', line 130, column 0 to column 37)",
                                                      " (in 'string', line 134, column 0 to column 25)",
                                                      " (in 'string', line 135, column 0 to column 25)",
                                                      " (in 'string', line 136, column 0 to column 34)",
                                                      " (in 'string', line 139, column 0 to column 44)",
                                                      " (in 'string', line 140, column 0 to column 57)",
                                                      " (in 'string', line 141, column 0 to column 57)",
                                                      " (in 'string', line 142, column 0 to column 43)",
                                                      " (in 'string', line 143, column 0 to column 43)",
                                                      " (in 'string', line 146, column 0 to column 71)",
                                                      " (in 'string', line 147, column 0 to column 71)",
                                                      " (in 'string', line 150, column 0 to column 19)",
                                                      " (in 'string', line 151, column 0 to column 32)",
                                                      " (in 'string', line 152, column 0 to column 57)",
                                                      " (in 'string', line 154, column 0 to column 19)",
                                                      " (in 'string', line 156, column 0 to column 25)",
                                                      " (in 'string', line 163, column 4 to column 29)",
                                                      " (in 'string', line 164, column 4 to column 34)",
                                                      " (in 'string', line 165, column 4 to column 99)",
                                                      " (in 'string', line 166, column 4 to column 43)",
                                                      " (in 'string', line 162, column 28 to line 167, column 3)",
                                                      " (in 'string', line 162, column 8 to line 167, column 3)",
                                                      " (in 'string', line 161, column 4 to column 18)",
                                                      " (in 'string', line 160, column 21 to line 162, column 3)",
                                                      " (in 'string', line 160, column 2 to line 167, column 3)",
                                                      " (in 'string', line 175, column 6 to column 43)",
                                                      " (in 'string', line 174, column 27 to line 176, column 5)",
                                                      " (in 'string', line 174, column 10 to line 176, column 5)",
                                                      " (in 'string', line 173, column 6 to column 29)",
                                                      " (in 'string', line 172, column 27 to line 174, column 5)",
                                                      " (in 'string', line 172, column 10 to line 176, column 5)",
                                                      " (in 'string', line 171, column 6 to column 29)",
                                                      " (in 'string', line 170, column 21 to line 172, column 5)",
                                                      " (in 'string', line 170, column 4 to line 176, column 5)",
                                                      " (in 'string', line 169, column 26 to line 177, column 3)",
                                                      " (in 'string', line 169, column 2 to line 177, column 3)",
                                                      " (in 'string', line 188, column 6 to column 66)",
                                                      " (in 'string', line 187, column 17 to line 189, column 5)",
                                                      " (in 'string', line 187, column 4 to line 189, column 5)",
                                                      " (in 'string', line 191, column 6 to column 41)",
                                                      " (in 'string', line 190, column 20 to line 192, column 5)",
                                                      " (in 'string', line 190, column 4 to line 192, column 5)",
                                                      " (in 'string', line 194, column 6 to column 39)",
                                                      " (in 'string', line 193, column 21 to line 195, column 5)",
                                                      " (in 'string', line 193, column 4 to line 195, column 5)",
                                                      " (in 'string', line 186, column 40 to line 196, column 3)",
                                                      " (in 'string', line 186, column 2 to line 196, column 3)",
                                                      " (in 'string', line 198, column 4 to column 46)",
                                                      " (in 'string', line 200, column 6 to line 201, column 74)",
                                                      " (in 'string', line 199, column 21 to line 202, column 5)",
                                                      " (in 'string', line 199, column 4 to line 202, column 5)",
                                                      " (in 'string', line 205, column 8 to column 25)",
                                                      " (in 'string', line 204, column 26 to line 206, column 7)",
                                                      " (in 'string', line 204, column 6 to line 206, column 7)",
                                                      " (in 'string', line 208, column 6 to column 56)",
                                                      " (in 'string', line 207, column 26 to line 209, column 7)",
                                                      " (in 'string', line 207, column 6 to line 209, column 7)",
                                                      " (in 'string', line 211, column 8 to line 212, column 78)",
                                                      " (in 'string', line 210, column 26 to line 213, column 7)",
                                                      " (in 'string', line 210, column 6 to line 213, column 7)",
                                                      " (in 'string', line 203, column 22 to line 214, column 5)",
                                                      " (in 'string', line 203, column 4 to line 214, column 5)",
                                                      " (in 'string', line 197, column 39 to line 215, column 3)",
                                                      " (in 'string', line 197, column 2 to line 215, column 3)",
                                                      " (in 'string', line 217, column 4 to column 46)",
                                                      " (in 'string', line 219, column 6 to column 80)",
                                                      " (in 'string', line 218, column 17 to line 220, column 5)",
                                                      " (in 'string', line 218, column 4 to line 220, column 5)",
                                                      " (in 'string', line 222, column 6 to line 223, column 74)",
                                                      " (in 'string', line 221, column 21 to line 224, column 5)",
                                                      " (in 'string', line 221, column 4 to line 224, column 5)",
                                                      " (in 'string', line 227, column 8 to line 228, column 76)",
                                                      " (in 'string', line 226, column 26 to line 229, column 7)",
                                                      " (in 'string', line 226, column 6 to line 229, column 7)",
                                                      " (in 'string', line 231, column 8 to line 232, column 76)",
                                                      " (in 'string', line 230, column 26 to line 233, column 7)",
                                                      " (in 'string', line 230, column 6 to line 233, column 7)",
                                                      " (in 'string', line 235, column 8 to line 236, column 78)",
                                                      " (in 'string', line 234, column 26 to line 237, column 7)",
                                                      " (in 'string', line 234, column 6 to line 237, column 7)",
                                                      " (in 'string', line 225, column 22 to line 238, column 5)",
                                                      " (in 'string', line 225, column 4 to line 238, column 5)",
                                                      " (in 'string', line 216, column 39 to line 239, column 3)",
                                                      " (in 'string', line 216, column 2 to line 239, column 3)",
                                                      " (in 'string', line 185, column 5 to line 242, column 1)",
                                                      " (in 'string', line 181, column 2 to column 12)",
                                                      " (in 'string', line 183, column 6 to column 23)",
                                                      " (in 'string', line 182, column 19 to line 184, column 5)",
                                                      " (in 'string', line 182, column 2 to line 184, column 5)",
                                                      " (in 'string', line 180, column 42 to line 185, column 1)",
                                                      " (in 'string', line 180, column 0 to line 242, column 1)",
                                                      " (in 'string', line 388, column 4 to column 59)",
                                                      " (in 'string', line 387, column 7 to line 389, column 3)",
                                                      " (in 'string', line 386, column 4 to column 48)",
                                                      " (in 'string', line 385, column 21 to line 387, column 3)",
                                                      " (in 'string', line 385, column 2 to line 389, column 3)",
                                                      " (in 'string', line 390, column 2 to column 50)",
                                                      " (in 'string', line 396, column 6 to column 36)",
                                                      " (in 'string', line 397, column 6 to column 30)",
                                                      " (in 'string', line 395, column 11 to line 398, column 3)",
                                                      " (in 'string', line 393, column 6 to column 64)",
                                                      " (in 'string', line 394, column 6 to column 58)",
                                                      " (in 'string', line 392, column 13 to line 395, column 5)",
                                                      " (in 'string', line 392, column 0 to line 398, column 3)",
                                                      " (in 'string', line 384, column 17 to line 401, column 1)",
                                                      " (in 'string', line 384, column 0 to line 401, column 1)",
                                                      " (in 'string', line 372, column 25 to line 402, column 3)",
                                                      " (in 'string', line 372, column 8 to line 402, column 3)",
                                                      " (in 'string', line 338, column 4 to column 59)",
                                                      " (in 'string', line 337, column 7 to line 339, column 3)",
                                                      " (in 'string', line 336, column 4 to column 48)",
                                                      " (in 'string', line 335, column 21 to line 337, column 3)",
                                                      " (in 'string', line 335, column 2 to line 339, column 3)",
                                                      " (in 'string', line 344, column 6 to column 58)",
                                                      " (in 'string', line 343, column 9 to line 345, column 5)",
                                                      " (in 'string', line 342, column 6 to column 43)",
                                                      " (in 'string', line 341, column 23 to line 343, column 5)",
                                                      " (in 'string', line 341, column 4 to line 345, column 5)",
                                                      " (in 'string', line 340, column 21 to line 346, column 3)",
                                                      " (in 'string', line 340, column 2 to line 346, column 3)",
                                                      " (in 'string', line 351, column 6 to column 58)",
                                                      " (in 'string', line 350, column 9 to line 352, column 5)",
                                                      " (in 'string', line 349, column 6 to column 43)",
                                                      " (in 'string', line 348, column 23 to line 350, column 5)",
                                                      " (in 'string', line 348, column 4 to line 352, column 5)",
                                                      " (in 'string', line 347, column 21 to line 353, column 3)",
                                                      " (in 'string', line 347, column 2 to line 353, column 3)",
                                                      " (in 'string', line 359, column 4 to column 51)",
                                                      " (in 'string', line 358, column 27 to line 360, column 3)",
                                                      " (in 'string', line 358, column 8 to line 360, column 3)",
                                                      " (in 'string', line 357, column 4 to column 43)",
                                                      " (in 'string', line 356, column 27 to line 358, column 3)",
                                                      " (in 'string', line 356, column 8 to line 360, column 3)",
                                                      " (in 'string', line 355, column 4 to column 35)",
                                                      " (in 'string', line 354, column 21 to line 356, column 3)",
                                                      " (in 'string', line 354, column 2 to line 360, column 3)",
                                                      " (in 'string', line 366, column 6 to column 36)",
                                                      " (in 'string', line 367, column 6 to column 30)",
                                                      " (in 'string', line 365, column 11 to line 368, column 3)",
                                                      " (in 'string', line 363, column 6 to column 64)",
                                                      " (in 'string', line 364, column 6 to column 58)",
                                                      " (in 'string', line 362, column 13 to line 365, column 5)",
                                                      " (in 'string', line 362, column 0 to line 368, column 3)",
                                                      " (in 'string', line 334, column 17 to line 371, column 1)",
                                                      " (in 'string', line 334, column 0 to line 371, column 1)",
                                                      " (in 'string', line 297, column 25 to line 372, column 3)",
                                                      " (in 'string', line 297, column 8 to line 402, column 3)",
                                                      " (in 'string', line 283, column 4 to column 64)",
                                                      " (in 'string', line 282, column 7 to line 284, column 3)",
                                                      " (in 'string', line 281, column 4 to column 53)",
                                                      " (in 'string', line 280, column 20 to line 282, column 3)",
                                                      " (in 'string', line 280, column 2 to line 284, column 3)",
                                                      " (in 'string', line 285, column 2 to column 100)",
                                                      " (in 'string', line 286, column 2 to column 54)",
                                                      " (in 'string', line 287, column 2 to column 19)",
                                                      " (in 'string', line 288, column 2 to line 290, column 74)",
                                                      " (in 'string', line 291, column 2 to column 38)",
                                                      " (in 'string', line 292, column 2 to column 32)",
                                                      " (in 'string', line 293, column 2 to column 38)",
                                                      " (in 'string', line 294, column 2 to column 32)",
                                                      " (in 'string', line 279, column 17 to line 295, column 1)",
                                                      " (in 'string', line 279, column 0 to line 295, column 1)",
                                                      " (in 'string', line 275, column 25 to line 297, column 3)",
                                                      " (in 'string', line 275, column 8 to line 402, column 3)",
                                                      " (in 'string', line 260, column 4 to column 59)",
                                                      " (in 'string', line 259, column 7 to line 261, column 3)",
                                                      " (in 'string', line 258, column 4 to column 48)",
                                                      " (in 'string', line 257, column 21 to line 259, column 3)",
                                                      " (in 'string', line 257, column 2 to line 261, column 3)",
                                                      " (in 'string', line 262, column 2 to column 19)",
                                                      " (in 'string', line 269, column 6 to column 36)",
                                                      " (in 'string', line 270, column 6 to column 30)",
                                                      " (in 'string', line 268, column 11 to line 271, column 3)",
                                                      " (in 'string', line 266, column 6 to column 64)",
                                                      " (in 'string', line 267, column 6 to column 58)",
                                                      " (in 'string', line 265, column 13 to line 268, column 5)",
                                                      " (in 'string', line 265, column 0 to line 271, column 3)",
                                                      " (in 'string', line 256, column 17 to line 274, column 1)",
                                                      " (in 'string', line 256, column 0 to line 274, column 1)",
                                                      " (in 'string', line 244, column 19 to line 275, column 3)",
                                                      " (in 'string', line 244, column 2 to line 402, column 3)",
                                                      " (in 'string', line 515, column 2 to column 23)",
                                                      " (in 'string', line 516, column 2 to column 21)",
                                                      " (in 'string', line 517, column 2 to column 24)",
                                                      " (in 'string', line 518, column 2 to column 22)",
                                                      " (in 'string', line 519, column 2 to column 17)",
                                                      " (in 'string', line 520, column 2 to column 37)",
                                                      " (in 'string', line 521, column 2 to column 64)",
                                                      " (in 'string', line 664, column 6 to column 19)",
                                                      " (in 'string', line 663, column 7 to line 665, column 5)",
                                                      " (in 'string', line 660, column 6 to column 37)",
                                                      " (in 'string', line 661, column 6 to column 59)",
                                                      " (in 'string', line 659, column 30 to line 662, column 5)",
                                                      " (in 'string', line 659, column 10 to line 662, column 5)",
                                                      " (in 'string', line 658, column 6 to column 53)",
                                                      " (in 'string', line 657, column 30 to line 659, column 5)",
                                                      " (in 'string', line 657, column 10 to line 662, column 5)",
                                                      " (in 'string', line 656, column 6 to column 43)",
                                                      " (in 'string', line 655, column 24 to line 657, column 5)",
                                                      " (in 'string', line 655, column 4 to line 662, column 5)",
                                                      " (in 'string', line 654, column 23 to line 663, column 3)",
                                                      " (in 'string', line 654, column 2 to line 665, column 5)",
                                                      " (in 'string', line 669, column 4 to column 85)",
                                                      " (in 'string', line 668, column 7 to line 670, column 3)",
                                                      " (in 'string', line 667, column 4 to column 74)",
                                                      " (in 'string', line 666, column 21 to line 668, column 3)",
                                                      " (in 'string', line 666, column 2 to line 670, column 3)",
                                                      " (in 'string', line 652, column 18 to line 671, column 1)",
                                                      " (in 'string', line 652, column 0 to line 671, column 1)",
                                                      " (in 'string', line 676, column 4 to column 81)",
                                                      " (in 'string', line 675, column 7 to line 677, column 3)",
                                                      " (in 'string', line 674, column 4 to column 41)",
                                                      " (in 'string', line 673, column 15 to line 675, column 3)",
                                                      " (in 'string', line 673, column 2 to line 677, column 3)",
                                                      " (in 'string', line 678, column 2 to column 36)",
                                                      " (in 'string', line 672, column 18 to line 679, column 1)",
                                                      " (in 'string', line 672, column 0 to line 679, column 1)",
                                                      " (in 'string', line 681, column 2 to column 53)",
                                                      " (in 'string', line 685, column 4 to column 38)",
                                                      " (in 'string', line 684, column 7 to line 686, column 3)",
                                                      " (in 'string', line 683, column 4 to column 19)",
                                                      " (in 'string', line 682, column 22 to line 684, column 3)",
                                                      " (in 'string', line 682, column 2 to line 686, column 3)",
                                                      " (in 'string', line 680, column 18 to line 687, column 1)",
                                                      " (in 'string', line 680, column 0 to line 687, column 1)",
                                                      " (in 'string', line 650, column 26 to line 688, column 3)",
                                                      " (in 'string', line 650, column 8 to line 688, column 3)",
                                                      " (in 'string', line 575, column 6 to column 19)",
                                                      " (in 'string', line 574, column 7 to line 576, column 5)",
                                                      " (in 'string', line 571, column 6 to column 37)",
                                                      " (in 'string', line 572, column 6 to column 59)",
                                                      " (in 'string', line 570, column 30 to line 573, column 5)",
                                                      " (in 'string', line 570, column 10 to line 573, column 5)",
                                                      " (in 'string', line 569, column 6 to column 53)",
                                                      " (in 'string', line 568, column 30 to line 570, column 5)",
                                                      " (in 'string', line 568, column 10 to line 573, column 5)",
                                                      " (in 'string', line 567, column 6 to column 43)",
                                                      " (in 'string', line 566, column 24 to line 568, column 5)",
                                                      " (in 'string', line 566, column 4 to line 573, column 5)",
                                                      " (in 'string', line 565, column 23 to line 574, column 3)",
                                                      " (in 'string', line 565, column 2 to line 576, column 5)",
                                                      " (in 'string', line 601, column 6 to line 604, column 56)",
                                                      " (in 'string', line 600, column 9 to line 605, column 5)",
                                                      " (in 'string', line 597, column 6 to line 599, column 41)",
                                                      " (in 'string', line 596, column 23 to line 600, column 5)",
                                                      " (in 'string', line 596, column 4 to line 605, column 5)",
                                                      " (in 'string', line 595, column 27 to line 606, column 3)",
                                                      " (in 'string', line 595, column 8 to line 606, column 3)",
                                                      " (in 'string', line 591, column 6 to line 593, column 56)",
                                                      " (in 'string', line 590, column 9 to line 594, column 5)",
                                                      " (in 'string', line 587, column 6 to line 589, column 41)",
                                                      " (in 'string', line 586, column 23 to line 590, column 5)",
                                                      " (in 'string', line 586, column 4 to line 594, column 5)",
                                                      " (in 'string', line 585, column 27 to line 595, column 3)",
                                                      " (in 'string', line 585, column 8 to line 606, column 3)",
                                                      " (in 'string', line 582, column 6 to line 583, column 74)",
                                                      " (in 'string', line 581, column 9 to line 584, column 5)",
                                                      " (in 'string', line 579, column 6 to line 580, column 63)",
                                                      " (in 'string', line 578, column 23 to line 581, column 5)",
                                                      " (in 'string', line 578, column 4 to line 584, column 5)",
                                                      " (in 'string', line 577, column 22 to line 585, column 3)",
                                                      " (in 'string', line 577, column 3 to line 606, column 3)",
                                                      " (in 'string', line 563, column 18 to line 607, column 1)",
                                                      " (in 'string', line 563, column 0 to line 607, column 1)",
                                                      " (in 'string', line 619, column 6 to column 75)",
                                                      " (in 'string', line 618, column 29 to line 620, column 5)",
                                                      " (in 'string', line 618, column 10 to line 620, column 5)",
                                                      " (in 'string', line 617, column 6 to column 67)",
                                                      " (in 'string', line 616, column 29 to line 618, column 5)",
                                                      " (in 'string', line 616, column 10 to line 620, column 5)",
                                                      " (in 'string', line 615, column 6 to column 67)",
                                                      " (in 'string', line 614, column 23 to line 616, column 5)",
                                                      " (in 'string', line 614, column 4 to line 620, column 5)",
                                                      " (in 'string', line 613, column 7 to line 621, column 3)",
                                                      " (in 'string', line 612, column 4 to column 28)",
                                                      " (in 'string', line 611, column 40 to line 613, column 3)",
                                                      " (in 'string', line 611, column 8 to line 621, column 3)",
                                                      " (in 'string', line 610, column 4 to column 28)",
                                                      " (in 'string', line 609, column 34 to line 611, column 3)",
                                                      " (in 'string', line 609, column 2 to line 621, column 3)",
                                                      " (in 'string', line 637, column 4 to column 21)",
                                                      " (in 'string', line 638, column 4 to column 33)",
                                                      " (in 'string', line 639, column 4 to column 21)",
                                                      " (in 'string', line 640, column 4 to column 40)",
                                                      " (in 'string', line 646, column 6 to column 19)",
                                                      " (in 'string', line 645, column 30 to line 647, column 5)",
                                                      " (in 'string', line 645, column 10 to line 647, column 5)",
                                                      " (in 'string', line 644, column 6 to column 40)",
                                                      " (in 'string', line 643, column 30 to line 645, column 5)",
                                                      " (in 'string', line 643, column 10 to line 647, column 5)",
                                                      " (in 'string', line 642, column 6 to column 19)",
                                                      " (in 'string', line 641, column 24 to line 643, column 5)",
                                                      " (in 'string', line 641, column 4 to line 647, column 5)",
                                                      " (in 'string', line 636, column 27 to line 648, column 3)",
                                                      " (in 'string', line 636, column 8 to line 648, column 3)",
                                                      " (in 'string', line 630, column 4 to column 38)",
                                                      " (in 'string', line 634, column 6 to column 40)",
                                                      " (in 'string', line 633, column 9 to line 635, column 5)",
                                                      " (in 'string', line 632, column 6 to column 19)",
                                                      " (in 'string', line 631, column 24 to line 633, column 5)",
                                                      " (in 'string', line 631, column 4 to line 635, column 5)",
                                                      " (in 'string', line 629, column 27 to line 636, column 3)",
                                                      " (in 'string', line 629, column 8 to line 648, column 3)",
                                                      " (in 'string', line 623, column 4 to column 38)",
                                                      " (in 'string', line 627, column 6 to column 40)",
                                                      " (in 'string', line 626, column 9 to line 628, column 5)",
                                                      " (in 'string', line 625, column 6 to column 19)",
                                                      " (in 'string', line 624, column 24 to line 626, column 5)",
                                                      " (in 'string', line 624, column 4 to line 628, column 5)",
                                                      " (in 'string', line 622, column 21 to line 629, column 3)",
                                                      " (in 'string', line 622, column 2 to line 648, column 3)",
                                                      " (in 'string', line 608, column 17 to line 649, column 1)",
                                                      " (in 'string', line 608, column 0 to line 649, column 1)",
                                                      " (in 'string', line 561, column 28 to line 650, column 3)",
                                                      " (in 'string', line 561, column 8 to line 688, column 3)",
                                                      " (in 'string', line 552, column 2 to line 553, column 38)",
                                                      " (in 'string', line 554, column 2 to column 35)",
                                                      " (in 'string', line 558, column 4 to column 38)",
                                                      " (in 'string', line 557, column 7 to line 559, column 3)",
                                                      " (in 'string', line 556, column 4 to column 38)",
                                                      " (in 'string', line 555, column 21 to line 557, column 3)",
                                                      " (in 'string', line 555, column 2 to line 559, column 3)",
                                                      " (in 'string', line 551, column 18 to line 560, column 1)",
                                                      " (in 'string', line 551, column 0 to line 560, column 1)",
                                                      " (in 'string', line 549, column 27 to line 561, column 3)",
                                                      " (in 'string', line 549, column 8 to line 688, column 3)",
                                                      " (in 'string', line 525, column 6 to column 50)",
                                                      " (in 'string', line 526, column 6 to column 40)",
                                                      " (in 'string', line 524, column 22 to line 527, column 5)",
                                                      " (in 'string', line 524, column 4 to line 527, column 5)",
                                                      " (in 'string', line 541, column 6 to column 19)",
                                                      " (in 'string', line 540, column 7 to line 542, column 5)",
                                                      " (in 'string', line 537, column 6 to column 37)",
                                                      " (in 'string', line 538, column 6 to column 59)",
                                                      " (in 'string', line 536, column 30 to line 539, column 5)",
                                                      " (in 'string', line 536, column 10 to line 539, column 5)",
                                                      " (in 'string', line 535, column 6 to column 53)",
                                                      " (in 'string', line 534, column 30 to line 536, column 5)",
                                                      " (in 'string', line 534, column 10 to line 539, column 5)",
                                                      " (in 'string', line 533, column 6 to column 43)",
                                                      " (in 'string', line 532, column 24 to line 534, column 5)",
                                                      " (in 'string', line 532, column 4 to line 539, column 5)",
                                                      " (in 'string', line 531, column 23 to line 540, column 3)",
                                                      " (in 'string', line 531, column 2 to line 542, column 5)",
                                                      " (in 'string', line 546, column 8 to column 89)",
                                                      " (in 'string', line 545, column 11 to line 547, column 7)",
                                                      " (in 'string', line 544, column 8 to column 77)",
                                                      " (in 'string', line 543, column 25 to line 545, column 7)",
                                                      " (in 'string', line 543, column 6 to line 547, column 7)",
                                                      " (in 'string', line 529, column 22 to line 548, column 5)",
                                                      " (in 'string', line 529, column 4 to line 548, column 5)",
                                                      " (in 'string', line 523, column 22 to line 549, column 3)",
                                                      " (in 'string', line 523, column 2 to line 688, column 3)",
                                                      " (in 'string', line 406, column 2 to column 10)",
                                                      " (in 'string', line 407, column 2 to column 10)",
                                                      " (in 'string', line 410, column 4 to column 38)",
                                                      " (in 'string', line 409, column 19 to line 411, column 3)",
                                                      " (in 'string', line 409, column 2 to line 411, column 3)",
                                                      " (in 'string', line 415, column 4 to column 25)",
                                                      " (in 'string', line 416, column 4 to column 29)",
                                                      " (in 'string', line 417, column 4 to column 28)",
                                                      " (in 'string', line 418, column 4 to column 42)",
                                                      " (in 'string', line 414, column 30 to line 419, column 3)",
                                                      " (in 'string', line 414, column 8 to line 419, column 3)",
                                                      " (in 'string', line 413, column 4 to column 36)",
                                                      " (in 'string', line 412, column 22 to line 414, column 3)",
                                                      " (in 'string', line 412, column 2 to line 419, column 3)",
                                                      " (in 'string', line 430, column 6 to column 27)",
                                                      " (in 'string', line 431, column 6 to column 28)",
                                                      " (in 'string', line 432, column 6 to column 41)",
                                                      " (in 'string', line 429, column 30 to line 433, column 5)",
                                                      " (in 'string', line 429, column 10 to line 433, column 5)",
                                                      " (in 'string', line 426, column 6 to column 37)",
                                                      " (in 'string', line 427, column 43 to column 44)",
                                                      " (in 'string', line 427, column 6 to column 48)",
                                                      " (in 'string', line 428, column 6 to column 31)",
                                                      " (in 'string', line 425, column 30 to line 429, column 5)",
                                                      " (in 'string', line 425, column 10 to line 433, column 5)",
                                                      " (in 'string', line 423, column 6 to column 27)",
                                                      " (in 'string', line 424, column 43 to column 44)",
                                                      " (in 'string', line 424, column 6 to column 48)",
                                                      " (in 'string', line 422, column 24 to line 425, column 5)",
                                                      " (in 'string', line 422, column 4 to line 433, column 5)",
                                                      " (in 'string', line 421, column 26 to line 434, column 3)",
                                                      " (in 'string', line 421, column 2 to line 434, column 3)",
                                                      " (in 'string', line 437, column 33 to column 34)",
                                                      " (in 'string', line 437, column 4 to column 38)",
                                                      " (in 'string', line 440, column 9 to column 54)",
                                                      " (in 'string', line 439, column 23 to line 441, column 7)",
                                                      " (in 'string', line 439, column 6 to line 441, column 7)",
                                                      " (in 'string', line 443, column 8 to column 73)",
                                                      " (in 'string', line 442, column 23 to line 444, column 7)",
                                                      " (in 'string', line 442, column 6 to line 444, column 7)",
                                                      " (in 'string', line 445, column 4 to column 25)",
                                                      " (in 'string', line 438, column 24 to line 446, column 5)",
                                                      " (in 'string', line 438, column 4 to line 446, column 5)",
                                                      " (in 'string', line 447, column 4 to column 60)",
                                                      " (in 'string', line 436, column 23 to line 448, column 3)",
                                                      " (in 'string', line 436, column 2 to line 448, column 3)",
                                                      " (in 'string', line 451, column 34 to column 35)",
                                                      " (in 'string', line 451, column 5 to column 39)",
                                                      " (in 'string', line 453, column 8 to column 49)",
                                                      " (in 'string', line 454, column 8 to column 73)",
                                                      " (in 'string', line 452, column 20 to line 455, column 6)",
                                                      " (in 'string', line 452, column 5 to line 455, column 6)",
                                                      " (in 'string', line 450, column 24 to line 456, column 3)",
                                                      " (in 'string', line 450, column 2 to line 456, column 3)",
                                                      " (in 'string', line 459, column 4 to column 22)",
                                                      " (in 'string', line 460, column 4 to column 33)",
                                                      " (in 'string', line 458, column 22 to line 461, column 3)",
                                                      " (in 'string', line 458, column 2 to line 461, column 3)",
                                                      " (in 'string', line 464, column 6 to column 32)",
                                                      " (in 'string', line 466, column 8 to column 38)",
                                                      " (in 'string', line 465, column 25 to line 467, column 7)",
                                                      " (in 'string', line 465, column 6 to line 467, column 7)",
                                                      " (in 'string', line 463, column 23 to line 468, column 5)",
                                                      " (in 'string', line 463, column 4 to line 468, column 5)",
                                                      " (in 'string', line 470, column 6 to column 32)",
                                                      " (in 'string', line 472, column 8 to column 38)",
                                                      " (in 'string', line 471, column 25 to line 473, column 7)",
                                                      " (in 'string', line 471, column 6 to line 473, column 7)",
                                                      " (in 'string', line 469, column 23 to line 474, column 5)",
                                                      " (in 'string', line 469, column 4 to line 474, column 5)",
                                                      " (in 'string', line 462, column 22 to line 475, column 3)",
                                                      " (in 'string', line 462, column 2 to line 475, column 3)",
                                                      " (in 'string', line 508, column 8 to line 509, column 41)",
                                                      " (in 'string', line 507, column 11 to line 510, column 7)",
                                                      " (in 'string', line 506, column 8 to column 42)",
                                                      " (in 'string', line 505, column 20 to line 507, column 7)",
                                                      " (in 'string', line 505, column 6 to line 510, column 7)",
                                                      " (in 'string', line 504, column 22 to line 511, column 5)",
                                                      " (in 'string', line 504, column 4 to line 511, column 5)",
                                                      " (in 'string', line 503, column 28 to line 512, column 3)",
                                                      " (in 'string', line 503, column 8 to line 512, column 3)",
                                                      " (in 'string', line 493, column 8 to column 49)",
                                                      " (in 'string', line 499, column 10 to column 43)",
                                                      " (in 'string', line 498, column 33 to line 500, column 9)",
                                                      " (in 'string', line 498, column 14 to line 500, column 9)",
                                                      " (in 'string', line 497, column 10 to column 35)",
                                                      " (in 'string', line 496, column 33 to line 498, column 9)",
                                                      " (in 'string', line 496, column 14 to line 500, column 9)",
                                                      " (in 'string', line 495, column 10 to column 35)",
                                                      " (in 'string', line 494, column 27 to line 496, column 9)",
                                                      " (in 'string', line 494, column 8 to line 500, column 9)",
                                                      " (in 'string', line 492, column 11 to line 501, column 7)",
                                                      " (in 'string', line 491, column 8 to column 29)",
                                                      " (in 'string', line 490, column 44 to line 492, column 7)",
                                                      " (in 'string', line 490, column 12 to line 501, column 7)",
                                                      " (in 'string', line 489, column 8 to column 29)",
                                                      " (in 'string', line 488, column 38 to line 490, column 7)",
                                                      " (in 'string', line 488, column 6 to line 501, column 7)",
                                                      " (in 'string', line 487, column 22 to line 502, column 5)",
                                                      " (in 'string', line 487, column 4 to line 502, column 5)",
                                                      " (in 'string', line 486, column 28 to line 503, column 3)",
                                                      " (in 'string', line 486, column 8 to line 512, column 3)",
                                                      " (in 'string', line 483, column 6 to line 484, column 40)",
                                                      " (in 'string', line 482, column 22 to line 485, column 5)",
                                                      " (in 'string', line 482, column 4 to line 485, column 5)",
                                                      " (in 'string', line 481, column 26 to line 486, column 3)",
                                                      " (in 'string', line 481, column 8 to line 512, column 3)",
                                                      " (in 'string', line 479, column 6 to column 47)",
                                                      " (in 'string', line 478, column 22 to line 480, column 5)",
                                                      " (in 'string', line 478, column 4 to line 480, column 5)",
                                                      " (in 'string', line 477, column 22 to line 481, column 3)",
                                                      " (in 'string', line 477, column 2 to line 512, column 3)",
                                                      " (in 'string', line 4, column 0 to column 32)",
                                                      " (in 'string', line 5, column 0 to column 27)",
                                                      " (in 'string', line 6, column 0 to column 33)",
                                                      " (in 'string', line 7, column 0 to column 34)",
                                                      " (in 'string', line 8, column 0 to column 33)",
                                                      " (in 'string', line 9, column 0 to column 32)",
                                                      " (in 'string', line 10, column 0 to column 35)",
                                                      " (in 'string', line 11, column 0 to column 34)",
                                                      " (in 'string', line 12, column 0 to column 38)",
                                                      " (in 'string', line 16, column 0 to column 18)",
                                                      " (in 'string', line 17, column 0 to column 19)",
                                                      " (in 'string', line 18, column 0 to column 15)",
                                                      " (in 'string', line 19, column 0 to column 15)",
                                                      " (in 'string', line 20, column 0 to column 16)",
                                                      " (in 'string', line 23, column 25 to column 29)",
                                                      " (in 'string', line 23, column 0 to column 33)",
                                                      " (in 'string', line 24, column 7 to column 11)",
                                                      " (in 'string', line 24, column 13 to column 14)",
                                                      " (in 'string', line 24, column 0 to column 18)",
                                                      " (in 'string', line 25, column 7 to column 12)",
                                                      " (in 'string', line 25, column 13 to column 14)",
                                                      " (in 'string', line 25, column 0 to column 22)",
                                                      " (in 'string', line 26, column 16 to column 20)",
                                                      " (in 'string', line 26, column 0 to column 27)",
                                                      " (in 'string', line 27, column 16 to column 20)",
                                                      " (in 'string', line 27, column 0 to column 26)",
                                                      " (in 'string', line 30, column 6 to column 10)",
                                                      " (in 'string', line 30, column 0 to column 36)",
                                                      " (in 'string', line 31, column 6 to column 11)",
                                                      " (in 'string', line 31, column 0 to column 38)",
                                                      " (in 'string', line 32, column 6 to column 7)",
                                                      " (in 'string', line 32, column 0 to column 35)",
                                                      " (in 'string', line 33, column 6 to column 16)",
                                                      " (in 'string', line 33, column 0 to column 46)",
                                                      " (in 'string', line 36, column 0 to column 21)",
                                                      " (in 'string', line 37, column 0 to column 20)",
                                                      " (in 'string', line 38, column 6 to column 12)",
                                                      " (in 'string', line 38, column 0 to column 33)",
                                                      " (in 'string', line 39, column 16 to column 17)",
                                                      " (in 'string', line 39, column 0 to column 31)",
                                                      " (in 'string', line 40, column 6 to column 13)",
                                                      " (in 'string', line 40, column 0 to column 43)",
                                                      " (in 'string', line 41, column 6 to column 13)",
                                                      " (in 'string', line 41, column 0 to column 43)",
                                                      " (in 'string', line 44, column 6 to column 10)",
                                                      " (in 'string', line 44, column 0 to column 43)",
                                                      " (in 'string', line 45, column 6 to column 10)",
                                                      " (in 'string', line 45, column 0 to column 43)",
                                                      " (in 'string', line 46, column 0 to column 31)",
                                                      " (in 'string', line 47, column 6 to column 11)",
                                                      " (in 'string', line 47, column 0 to column 34)",
                                                      " (in 'string', line 50, column 0 to column 23)",
                                                      " (in 'string', line 51, column 0 to column 20)",
                                                      " (in 'string', line 52, column 0 to column 25)",
                                                      " (in 'string', line 53, column 0 to column 22)",
                                                      " (in 'string', line 56, column 0 to column 26)",
                                                      " (in 'string', line 57, column 0 to column 28)",
                                                      " (in 'string', line 58, column 0 to column 29)",
                                                      " (in 'string', line 59, column 0 to column 26)",
                                                      " (in 'string', line 62, column 2 to column 40)",
                                                      " (in 'string', line 64, column 2 to column 49)",
                                                      " (in 'string', line 65, column 2 to column 40)",
                                                      " (in 'string', line 66, column 2 to column 21)",
                                                      " (in 'string', line 67, column 2 to column 24)",
                                                      " (in 'string', line 71, column 4 to column 71)",
                                                      " (in 'string', line 70, column 7 to line 72, column 3)",
                                                      " (in 'string', line 69, column 4 to column 13)",
                                                      " (in 'string', line 68, column 10 to line 70, column 3)",
                                                      " (in 'string', line 68, column 2 to line 72, column 3)",
                                                      " (in 'string', line 79, column 6 to column 19)",
                                                      " (in 'string', line 78, column 9 to line 80, column 5)",
                                                      " (in 'string', line 77, column 6 to column 19)",
                                                      " (in 'string', line 76, column 28 to line 78, column 5)",
                                                      " (in 'string', line 76, column 4 to line 80, column 5)",
                                                      " (in 'string', line 75, column 7 to line 81, column 3)",
                                                      " (in 'string', line 74, column 4 to column 20)",
                                                      " (in 'string', line 73, column 23 to line 75, column 3)",
                                                      " (in 'string', line 73, column 2 to line 81, column 3)",
                                                      " (in 'string', line 86, column 7 to column 27)",
                                                      " (in 'string', line 87, column 7 to column 8)",
                                                      " (in 'string', line 89, column 18 to column 40)",
                                                      " (in 'string', line 90, column 20 to column 42)",
                                                      " (in 'string', line 91, column 20 to column 42)",
                                                      " (in 'string', line 94, column 7 to column 15)",
                                                      " (in 'string', line 96, column 20 to column 86)",
                                                      " (in 'string', line 98, column 20 to column 67)",
                                                      " (in 'string', line 100, column 20 to column 74)",
                                                      " (in 'string', line 101, column 20 to column 67)",
                                                      " (in 'string', line 104, column 7 to column 27)",
                                                      " (in 'string', line 105, column 16 to column 36)",
                                                      " (in 'string', line 107, column 7 to column 28)",
                                                      " (in 'string', line 107, column 30 to column 52)",
                                                      " (in 'string', line 108, column 16 to column 37)",
                                                      " (in 'string', line 112, column 32 to column 51)",
                                                      " (in 'string', line 113, column 32 to column 51)",
                                                      " (in 'string', line 115, column 7 to column 46)",
                                                      " (in 'string', line 116, column 7 to column 46)",
                                                      " (in 'string', line 117, column 7 to column 62)",
                                                      " (in 'string', line 118, column 7 to column 62)",
                                                      " (in 'string', line 123, column 7 to column 8)",
                                                      " (in 'string', line 125, column 18 to column 38)",
                                                      " (in 'string', line 126, column 18 to column 38)",
                                                      " (in 'string', line 127, column 18 to column 38)",
                                                      " (in 'string', line 130, column 24 to column 28)",
                                                      " (in 'string', line 134, column 16 to column 20)",
                                                      " (in 'string', line 135, column 16 to column 20)",
                                                      " (in 'string', line 136, column 24 to column 28)",
                                                      " (in 'string', line 139, column 16 to column 38)",
                                                      " (in 'string', line 140, column 24 to column 46)",
                                                      " (in 'string', line 141, column 24 to column 46)",
                                                      " (in 'string', line 142, column 16 to column 38)",
                                                      " (in 'string', line 143, column 16 to column 38)",
                                                      " (in 'string', line 146, column 24 to column 66)",
                                                      " (in 'string', line 147, column 24 to column 66)",
                                                      " (in 'string', line 150, column 7 to column 15)",
                                                      " (in 'string', line 151, column 7 to column 27)",
                                                      " (in 'string', line 152, column 7 to column 28)",
                                                      " (in 'string', line 152, column 30 to column 52)",
                                                      " (in 'string', line 154, column 7 to column 11)",
                                                      " (in 'string', line 156, column 7 to column 12)",
                                                      " (in 'string', line 515, column 9 to column 13)",
                                                      " (in 'string', line 516, column 9 to column 13)",
                                                      " (in 'string', line 517, column 8 to column 9)",
                                                      " (in 'string', line 518, column 8 to column 9)",
                                                      " (in 'string', line 520, column 9 to column 29)",
                                                      " (in 'string', line 521, column 26 to column 51)"};
#include <stan_meta_header.hpp>
class model_global final : public model_base_crtp<model_global> {
private:
  int intercept;
  int deff;
  int prior_reff;
  int prior_coeff;
  int likelihood;
  int inflation;
  int temporal_err;
  int spatial_err;
  int spatio_temporal;
  int M_is;
  int M_oos;
  int D;
  int P;
  int TP;
  Eigen::Matrix<double, -1, 1> y;
  Eigen::Matrix<double, -1, -1> X;
  Eigen::Matrix<double, -1, -1> X_oos;
  Eigen::Matrix<double, -1, 1> disp;
  Eigen::Matrix<double, -1, 1> m_d;
  std::vector<int> indices_is;
  std::vector<int> indices_oos;
  std::vector<int> indices_spat;
  std::vector<std::vector<int>> indices_temp;
  int N_edges;
  int N_comp;
  std::vector<int> dim_c;
  Eigen::Matrix<double, -1, 1> scales_ICAR;
  std::vector<int> node1;
  std::vector<int> node2;
  std::vector<int> node1_t;
  std::vector<int> node2_t;
  double scale_factor_RW1;
  std::vector<int> cat_ios;
  double sigma_HS;
  double p0_HS;
  double slab_scale;
  double slab_df;
  double sigma_unstr;
  double sigma_spatial;
  double sigma_temporal;
  double sigma_coeff;
  int M_overall;
  double slab_scale2;
  double half_nu;
  double tau0;
  int length_v;
  int beta0_1dim__;
  int lambda_HS_1dim__;
  int z_c2_1dim__;
  int z_tau_1dim__;
  int sigma_v_1dim__;
  int nu_1dim__;
  int psi_d_1dim__;
  int lambda_1dim__;
  int s_raw_1dim__;
  int sigma_s_1dim__;
  int t_raw_1dim__;
  int t_raw_2dim__;
  int sigma_t_1dim__;
  int w_1dim__;
  int p_1dim__;
  int gamma_p0_1dim__;
  int gamma_p1_1dim__;
  int gamma0_p0_1dim__;
  int gamma0_p1_1dim__;
  int tau_1dim__;
  int c2_1dim__;
  int lambda_tilde_1dim__;
  int phi_1dim__;
  int lambda1_1dim__;
  int lambda2_1dim__;
  int b2_1dim__;
  int a2_1dim__;
  int p0_1dim__;
  int p1_1dim__;
  int s_1dim__;
  int t_1dim__;
  int t_2dim__;
  int probs_1dim__;
  int theta_oos_1dim__;
 
public:
  ~model_global() { }
  
  inline std::string model_name() const final { return "model_global"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_global(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_global_namespace::model_global";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 490;
      context__.validate_dims("data initialization","intercept","int",
          context__.to_vec());
      intercept = std::numeric_limits<int>::min();
      
      current_statement__ = 490;
      intercept = context__.vals_i("intercept")[(1 - 1)];
      current_statement__ = 490;
      current_statement__ = 490;
      check_greater_or_equal(function__, "intercept", intercept, 0);
      current_statement__ = 490;
      current_statement__ = 490;
      check_less_or_equal(function__, "intercept", intercept, 1);
      current_statement__ = 491;
      context__.validate_dims("data initialization","deff","int",
          context__.to_vec());
      deff = std::numeric_limits<int>::min();
      
      current_statement__ = 491;
      deff = context__.vals_i("deff")[(1 - 1)];
      current_statement__ = 491;
      current_statement__ = 491;
      check_greater_or_equal(function__, "deff", deff, 0);
      current_statement__ = 491;
      current_statement__ = 491;
      check_less_or_equal(function__, "deff", deff, 1);
      current_statement__ = 492;
      context__.validate_dims("data initialization","prior_reff","int",
          context__.to_vec());
      prior_reff = std::numeric_limits<int>::min();
      
      current_statement__ = 492;
      prior_reff = context__.vals_i("prior_reff")[(1 - 1)];
      current_statement__ = 492;
      current_statement__ = 492;
      check_greater_or_equal(function__, "prior_reff", prior_reff, 0);
      current_statement__ = 492;
      current_statement__ = 492;
      check_less_or_equal(function__, "prior_reff", prior_reff, 2);
      current_statement__ = 493;
      context__.validate_dims("data initialization","prior_coeff","int",
          context__.to_vec());
      prior_coeff = std::numeric_limits<int>::min();
      
      current_statement__ = 493;
      prior_coeff = context__.vals_i("prior_coeff")[(1 - 1)];
      current_statement__ = 493;
      current_statement__ = 493;
      check_greater_or_equal(function__, "prior_coeff", prior_coeff, 0);
      current_statement__ = 493;
      current_statement__ = 493;
      check_less_or_equal(function__, "prior_coeff", prior_coeff, 1);
      current_statement__ = 494;
      context__.validate_dims("data initialization","likelihood","int",
          context__.to_vec());
      likelihood = std::numeric_limits<int>::min();
      
      current_statement__ = 494;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 494;
      current_statement__ = 494;
      check_greater_or_equal(function__, "likelihood", likelihood, 0);
      current_statement__ = 494;
      current_statement__ = 494;
      check_less_or_equal(function__, "likelihood", likelihood, 3);
      current_statement__ = 495;
      context__.validate_dims("data initialization","inflation","int",
          context__.to_vec());
      inflation = std::numeric_limits<int>::min();
      
      current_statement__ = 495;
      inflation = context__.vals_i("inflation")[(1 - 1)];
      current_statement__ = 495;
      current_statement__ = 495;
      check_greater_or_equal(function__, "inflation", inflation, 0);
      current_statement__ = 495;
      current_statement__ = 495;
      check_less_or_equal(function__, "inflation", inflation, 2);
      current_statement__ = 496;
      context__.validate_dims("data initialization","temporal_err","int",
          context__.to_vec());
      temporal_err = std::numeric_limits<int>::min();
      
      current_statement__ = 496;
      temporal_err = context__.vals_i("temporal_err")[(1 - 1)];
      current_statement__ = 496;
      current_statement__ = 496;
      check_greater_or_equal(function__, "temporal_err", temporal_err, 0);
      current_statement__ = 496;
      current_statement__ = 496;
      check_less_or_equal(function__, "temporal_err", temporal_err, 1);
      current_statement__ = 497;
      context__.validate_dims("data initialization","spatial_err","int",
          context__.to_vec());
      spatial_err = std::numeric_limits<int>::min();
      
      current_statement__ = 497;
      spatial_err = context__.vals_i("spatial_err")[(1 - 1)];
      current_statement__ = 497;
      current_statement__ = 497;
      check_greater_or_equal(function__, "spatial_err", spatial_err, 0);
      current_statement__ = 497;
      current_statement__ = 497;
      check_less_or_equal(function__, "spatial_err", spatial_err, 1);
      current_statement__ = 498;
      context__.validate_dims("data initialization","spatio_temporal","int",
          context__.to_vec());
      spatio_temporal = std::numeric_limits<int>::min();
      
      current_statement__ = 498;
      spatio_temporal = context__.vals_i("spatio_temporal")[(1 - 1)];
      current_statement__ = 498;
      current_statement__ = 498;
      check_greater_or_equal(function__, "spatio_temporal", spatio_temporal,
                             0);
      current_statement__ = 498;
      current_statement__ = 498;
      check_less_or_equal(function__, "spatio_temporal", spatio_temporal, 1);
      current_statement__ = 499;
      context__.validate_dims("data initialization","M_is","int",
          context__.to_vec());
      M_is = std::numeric_limits<int>::min();
      
      current_statement__ = 499;
      M_is = context__.vals_i("M_is")[(1 - 1)];
      current_statement__ = 499;
      current_statement__ = 499;
      check_greater_or_equal(function__, "M_is", M_is, 0);
      current_statement__ = 500;
      context__.validate_dims("data initialization","M_oos","int",
          context__.to_vec());
      M_oos = std::numeric_limits<int>::min();
      
      current_statement__ = 500;
      M_oos = context__.vals_i("M_oos")[(1 - 1)];
      current_statement__ = 500;
      current_statement__ = 500;
      check_greater_or_equal(function__, "M_oos", M_oos, 0);
      current_statement__ = 501;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 501;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 501;
      current_statement__ = 501;
      check_greater_or_equal(function__, "D", D, 0);
      current_statement__ = 502;
      context__.validate_dims("data initialization","P","int",
          context__.to_vec());
      P = std::numeric_limits<int>::min();
      
      current_statement__ = 502;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 502;
      current_statement__ = 502;
      check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 503;
      context__.validate_dims("data initialization","TP","int",
          context__.to_vec());
      TP = std::numeric_limits<int>::min();
      
      current_statement__ = 503;
      TP = context__.vals_i("TP")[(1 - 1)];
      current_statement__ = 503;
      current_statement__ = 503;
      check_greater_or_equal(function__, "TP", TP, 0);
      current_statement__ = 504;
      validate_non_negative_index("y", "M_is", M_is);
      current_statement__ = 505;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(M_is));
      y = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 505;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 505;
        pos__ = 1;
        current_statement__ = 505;
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          current_statement__ = 505;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 505;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 505;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 505;
        current_statement__ = 505;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);}
      current_statement__ = 505;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 505;
        current_statement__ = 505;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 1);}
      current_statement__ = 506;
      validate_non_negative_index("X", "M_is", M_is);
      current_statement__ = 507;
      validate_non_negative_index("X", "P", P);
      current_statement__ = 508;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(M_is, P));
      X = Eigen::Matrix<double, -1, -1>(M_is, P);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 508;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 508;
        pos__ = 1;
        current_statement__ = 508;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 508;
          for (int sym2__ = 1; sym2__ <= M_is; ++sym2__) {
            current_statement__ = 508;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 508;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 509;
      validate_non_negative_index("X_oos", "M_oos", M_oos);
      current_statement__ = 510;
      validate_non_negative_index("X_oos", "P", P);
      current_statement__ = 511;
      context__.validate_dims("data initialization","X_oos","double",
          context__.to_vec(M_oos, P));
      X_oos = Eigen::Matrix<double, -1, -1>(M_oos, P);
      stan::math::fill(X_oos, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_oos_flat__;
        current_statement__ = 511;
        assign(X_oos_flat__, nil_index_list(), context__.vals_r("X_oos"),
          "assigning variable X_oos_flat__");
        current_statement__ = 511;
        pos__ = 1;
        current_statement__ = 511;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 511;
          for (int sym2__ = 1; sym2__ <= M_oos; ++sym2__) {
            current_statement__ = 511;
            assign(X_oos,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_oos_flat__[(pos__ - 1)], "assigning variable X_oos");
            current_statement__ = 511;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 512;
      validate_non_negative_index("disp", "M_is", M_is);
      current_statement__ = 513;
      context__.validate_dims("data initialization","disp","double",
          context__.to_vec(M_is));
      disp = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(disp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> disp_flat__;
        current_statement__ = 513;
        assign(disp_flat__, nil_index_list(), context__.vals_r("disp"),
          "assigning variable disp_flat__");
        current_statement__ = 513;
        pos__ = 1;
        current_statement__ = 513;
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          current_statement__ = 513;
          assign(disp, cons_list(index_uni(sym1__), nil_index_list()),
            disp_flat__[(pos__ - 1)], "assigning variable disp");
          current_statement__ = 513;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 513;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 513;
        current_statement__ = 513;
        check_greater_or_equal(function__, "disp[sym1__]",
                               disp[(sym1__ - 1)], 0);}
      current_statement__ = 514;
      validate_non_negative_index("m_d", "M_is", M_is);
      current_statement__ = 515;
      context__.validate_dims("data initialization","m_d","double",
          context__.to_vec(M_is));
      m_d = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(m_d, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> m_d_flat__;
        current_statement__ = 515;
        assign(m_d_flat__, nil_index_list(), context__.vals_r("m_d"),
          "assigning variable m_d_flat__");
        current_statement__ = 515;
        pos__ = 1;
        current_statement__ = 515;
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          current_statement__ = 515;
          assign(m_d, cons_list(index_uni(sym1__), nil_index_list()),
            m_d_flat__[(pos__ - 1)], "assigning variable m_d");
          current_statement__ = 515;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 515;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 515;
        current_statement__ = 515;
        check_greater_or_equal(function__, "m_d[sym1__]", m_d[(sym1__ - 1)],
                               0);}
      current_statement__ = 516;
      validate_non_negative_index("indices_is", "M_is", M_is);
      current_statement__ = 517;
      context__.validate_dims("data initialization","indices_is","int",
          context__.to_vec(M_is));
      indices_is = std::vector<int>(M_is, std::numeric_limits<int>::min());
      
      current_statement__ = 517;
      assign(indices_is, nil_index_list(), context__.vals_i("indices_is"),
        "assigning variable indices_is");
      current_statement__ = 517;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 517;
        current_statement__ = 517;
        check_greater_or_equal(function__, "indices_is[sym1__]",
                               indices_is[(sym1__ - 1)], 0);}
      current_statement__ = 518;
      validate_non_negative_index("indices_oos", "M_oos", M_oos);
      current_statement__ = 519;
      context__.validate_dims("data initialization","indices_oos","int",
          context__.to_vec(M_oos));
      indices_oos = std::vector<int>(M_oos, std::numeric_limits<int>::min());
      
      current_statement__ = 519;
      assign(indices_oos, nil_index_list(), context__.vals_i("indices_oos"),
        "assigning variable indices_oos");
      current_statement__ = 519;
      for (int sym1__ = 1; sym1__ <= M_oos; ++sym1__) {
        current_statement__ = 519;
        current_statement__ = 519;
        check_greater_or_equal(function__, "indices_oos[sym1__]",
                               indices_oos[(sym1__ - 1)], 0);}
      current_statement__ = 520;
      validate_non_negative_index("indices_spat", "D", D);
      current_statement__ = 521;
      context__.validate_dims("data initialization","indices_spat","int",
          context__.to_vec(D));
      indices_spat = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 521;
      assign(indices_spat, nil_index_list(),
        context__.vals_i("indices_spat"), "assigning variable indices_spat");
      current_statement__ = 521;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 521;
        current_statement__ = 521;
        check_greater_or_equal(function__, "indices_spat[sym1__]",
                               indices_spat[(sym1__ - 1)], 0);}
      current_statement__ = 522;
      validate_non_negative_index("indices_temp", "M_is + M_oos",
                                  (M_is + M_oos));
      current_statement__ = 523;
      context__.validate_dims("data initialization","indices_temp","int",
          context__.to_vec((M_is + M_oos), 2));
      indices_temp = std::vector<std::vector<int>>((M_is + M_oos), std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> indices_temp_flat__;
        current_statement__ = 523;
        assign(indices_temp_flat__, nil_index_list(),
          context__.vals_i("indices_temp"),
          "assigning variable indices_temp_flat__");
        current_statement__ = 523;
        pos__ = 1;
        current_statement__ = 523;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 523;
          for (int sym2__ = 1; sym2__ <= (M_is + M_oos); ++sym2__) {
            current_statement__ = 523;
            assign(indices_temp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              indices_temp_flat__[(pos__ - 1)],
              "assigning variable indices_temp");
            current_statement__ = 523;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 523;
      for (int sym1__ = 1; sym1__ <= (M_is + M_oos); ++sym1__) {
        current_statement__ = 523;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 523;
          current_statement__ = 523;
          check_greater_or_equal(function__, "indices_temp[sym1__, sym2__]",
                                 indices_temp[(sym1__ - 1)][(sym2__ - 1)], 0);
        }}
      current_statement__ = 524;
      context__.validate_dims("data initialization","N_edges","int",
          context__.to_vec());
      N_edges = std::numeric_limits<int>::min();
      
      current_statement__ = 524;
      N_edges = context__.vals_i("N_edges")[(1 - 1)];
      current_statement__ = 524;
      current_statement__ = 524;
      check_greater_or_equal(function__, "N_edges", N_edges, 0);
      current_statement__ = 525;
      context__.validate_dims("data initialization","N_comp","int",
          context__.to_vec());
      N_comp = std::numeric_limits<int>::min();
      
      current_statement__ = 525;
      N_comp = context__.vals_i("N_comp")[(1 - 1)];
      current_statement__ = 525;
      current_statement__ = 525;
      check_greater_or_equal(function__, "N_comp", N_comp, 0);
      current_statement__ = 526;
      validate_non_negative_index("dim_c", "N_comp", N_comp);
      current_statement__ = 527;
      context__.validate_dims("data initialization","dim_c","int",
          context__.to_vec(N_comp));
      dim_c = std::vector<int>(N_comp, std::numeric_limits<int>::min());
      
      current_statement__ = 527;
      assign(dim_c, nil_index_list(), context__.vals_i("dim_c"),
        "assigning variable dim_c");
      current_statement__ = 527;
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        current_statement__ = 527;
        current_statement__ = 527;
        check_greater_or_equal(function__, "dim_c[sym1__]",
                               dim_c[(sym1__ - 1)], 0);}
      current_statement__ = 528;
      validate_non_negative_index("scales_ICAR", "D", D);
      current_statement__ = 529;
      context__.validate_dims("data initialization","scales_ICAR","double",
          context__.to_vec(D));
      scales_ICAR = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(scales_ICAR, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> scales_ICAR_flat__;
        current_statement__ = 529;
        assign(scales_ICAR_flat__, nil_index_list(),
          context__.vals_r("scales_ICAR"),
          "assigning variable scales_ICAR_flat__");
        current_statement__ = 529;
        pos__ = 1;
        current_statement__ = 529;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 529;
          assign(scales_ICAR, cons_list(index_uni(sym1__), nil_index_list()),
            scales_ICAR_flat__[(pos__ - 1)], "assigning variable scales_ICAR");
          current_statement__ = 529;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 529;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 529;
        current_statement__ = 529;
        check_greater_or_equal(function__, "scales_ICAR[sym1__]",
                               scales_ICAR[(sym1__ - 1)], 0);}
      current_statement__ = 530;
      validate_non_negative_index("node1", "N_edges", N_edges);
      current_statement__ = 531;
      context__.validate_dims("data initialization","node1","int",
          context__.to_vec(N_edges));
      node1 = std::vector<int>(N_edges, std::numeric_limits<int>::min());
      
      current_statement__ = 531;
      assign(node1, nil_index_list(), context__.vals_i("node1"),
        "assigning variable node1");
      current_statement__ = 531;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 531;
        current_statement__ = 531;
        check_greater_or_equal(function__, "node1[sym1__]",
                               node1[(sym1__ - 1)], 1);}
      current_statement__ = 531;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 531;
        current_statement__ = 531;
        check_less_or_equal(function__, "node1[sym1__]", node1[(sym1__ - 1)],
                            D);}
      current_statement__ = 532;
      validate_non_negative_index("node2", "N_edges", N_edges);
      current_statement__ = 533;
      context__.validate_dims("data initialization","node2","int",
          context__.to_vec(N_edges));
      node2 = std::vector<int>(N_edges, std::numeric_limits<int>::min());
      
      current_statement__ = 533;
      assign(node2, nil_index_list(), context__.vals_i("node2"),
        "assigning variable node2");
      current_statement__ = 533;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 533;
        current_statement__ = 533;
        check_greater_or_equal(function__, "node2[sym1__]",
                               node2[(sym1__ - 1)], 1);}
      current_statement__ = 533;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 533;
        current_statement__ = 533;
        check_less_or_equal(function__, "node2[sym1__]", node2[(sym1__ - 1)],
                            D);}
      current_statement__ = 534;
      validate_non_negative_index("node1_t", "TP - 1", (TP - 1));
      current_statement__ = 535;
      context__.validate_dims("data initialization","node1_t","int",
          context__.to_vec((TP - 1)));
      node1_t = std::vector<int>((TP - 1), std::numeric_limits<int>::min());
      
      current_statement__ = 535;
      assign(node1_t, nil_index_list(), context__.vals_i("node1_t"),
        "assigning variable node1_t");
      current_statement__ = 535;
      for (int sym1__ = 1; sym1__ <= (TP - 1); ++sym1__) {
        current_statement__ = 535;
        current_statement__ = 535;
        check_greater_or_equal(function__, "node1_t[sym1__]",
                               node1_t[(sym1__ - 1)], 1);}
      current_statement__ = 535;
      for (int sym1__ = 1; sym1__ <= (TP - 1); ++sym1__) {
        current_statement__ = 535;
        current_statement__ = 535;
        check_less_or_equal(function__, "node1_t[sym1__]",
                            node1_t[(sym1__ - 1)], TP);}
      current_statement__ = 536;
      validate_non_negative_index("node2_t", "TP - 1", (TP - 1));
      current_statement__ = 537;
      context__.validate_dims("data initialization","node2_t","int",
          context__.to_vec((TP - 1)));
      node2_t = std::vector<int>((TP - 1), std::numeric_limits<int>::min());
      
      current_statement__ = 537;
      assign(node2_t, nil_index_list(), context__.vals_i("node2_t"),
        "assigning variable node2_t");
      current_statement__ = 537;
      for (int sym1__ = 1; sym1__ <= (TP - 1); ++sym1__) {
        current_statement__ = 537;
        current_statement__ = 537;
        check_greater_or_equal(function__, "node2_t[sym1__]",
                               node2_t[(sym1__ - 1)], 1);}
      current_statement__ = 537;
      for (int sym1__ = 1; sym1__ <= (TP - 1); ++sym1__) {
        current_statement__ = 537;
        current_statement__ = 537;
        check_less_or_equal(function__, "node2_t[sym1__]",
                            node2_t[(sym1__ - 1)], TP);}
      current_statement__ = 538;
      context__.validate_dims("data initialization","scale_factor_RW1",
          "double",context__.to_vec());
      scale_factor_RW1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 538;
      scale_factor_RW1 = context__.vals_r("scale_factor_RW1")[(1 - 1)];
      current_statement__ = 538;
      current_statement__ = 538;
      check_greater_or_equal(function__, "scale_factor_RW1",
                             scale_factor_RW1, 0);
      current_statement__ = 539;
      validate_non_negative_index("cat_ios", "M_oos", M_oos);
      current_statement__ = 540;
      context__.validate_dims("data initialization","cat_ios","int",
          context__.to_vec(M_oos));
      cat_ios = std::vector<int>(M_oos, std::numeric_limits<int>::min());
      
      current_statement__ = 540;
      assign(cat_ios, nil_index_list(), context__.vals_i("cat_ios"),
        "assigning variable cat_ios");
      current_statement__ = 540;
      for (int sym1__ = 1; sym1__ <= M_oos; ++sym1__) {
        current_statement__ = 540;
        current_statement__ = 540;
        check_greater_or_equal(function__, "cat_ios[sym1__]",
                               cat_ios[(sym1__ - 1)], 0);}
      current_statement__ = 541;
      context__.validate_dims("data initialization","sigma_HS","double",
          context__.to_vec());
      sigma_HS = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 541;
      sigma_HS = context__.vals_r("sigma_HS")[(1 - 1)];
      current_statement__ = 541;
      current_statement__ = 541;
      check_greater_or_equal(function__, "sigma_HS", sigma_HS, 0);
      current_statement__ = 542;
      context__.validate_dims("data initialization","p0_HS","double",
          context__.to_vec());
      p0_HS = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 542;
      p0_HS = context__.vals_r("p0_HS")[(1 - 1)];
      current_statement__ = 542;
      current_statement__ = 542;
      check_greater_or_equal(function__, "p0_HS", p0_HS, 0);
      current_statement__ = 543;
      context__.validate_dims("data initialization","slab_scale","double",
          context__.to_vec());
      slab_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 543;
      slab_scale = context__.vals_r("slab_scale")[(1 - 1)];
      current_statement__ = 543;
      current_statement__ = 543;
      check_greater_or_equal(function__, "slab_scale", slab_scale, 0);
      current_statement__ = 544;
      context__.validate_dims("data initialization","slab_df","double",
          context__.to_vec());
      slab_df = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 544;
      slab_df = context__.vals_r("slab_df")[(1 - 1)];
      current_statement__ = 544;
      current_statement__ = 544;
      check_greater_or_equal(function__, "slab_df", slab_df, 0);
      current_statement__ = 545;
      context__.validate_dims("data initialization","sigma_unstr","double",
          context__.to_vec());
      sigma_unstr = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 545;
      sigma_unstr = context__.vals_r("sigma_unstr")[(1 - 1)];
      current_statement__ = 545;
      current_statement__ = 545;
      check_greater_or_equal(function__, "sigma_unstr", sigma_unstr, 0);
      current_statement__ = 546;
      context__.validate_dims("data initialization","sigma_spatial","double",
          context__.to_vec());
      sigma_spatial = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 546;
      sigma_spatial = context__.vals_r("sigma_spatial")[(1 - 1)];
      current_statement__ = 546;
      current_statement__ = 546;
      check_greater_or_equal(function__, "sigma_spatial", sigma_spatial, 0);
      current_statement__ = 547;
      context__.validate_dims("data initialization","sigma_temporal",
          "double",context__.to_vec());
      sigma_temporal = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 547;
      sigma_temporal = context__.vals_r("sigma_temporal")[(1 - 1)];
      current_statement__ = 547;
      current_statement__ = 547;
      check_greater_or_equal(function__, "sigma_temporal", sigma_temporal, 0);
      current_statement__ = 548;
      context__.validate_dims("data initialization","sigma_coeff","double",
          context__.to_vec());
      sigma_coeff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 548;
      sigma_coeff = context__.vals_r("sigma_coeff")[(1 - 1)];
      current_statement__ = 548;
      current_statement__ = 548;
      check_greater_or_equal(function__, "sigma_coeff", sigma_coeff, 0);
      current_statement__ = 549;
      M_overall = std::numeric_limits<int>::min();
      
      current_statement__ = 549;
      M_overall = (M_is + M_oos);
      current_statement__ = 550;
      slab_scale2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 550;
      slab_scale2 = square(slab_scale);
      current_statement__ = 551;
      half_nu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 551;
      half_nu = (0.5 * slab_df);
      current_statement__ = 552;
      tau0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 553;
      length_v = std::numeric_limits<int>::min();
      
      current_statement__ = 558;
      if (logical_eq(P, 0)) {
        current_statement__ = 556;
        tau0 = 1;
      } else {
        current_statement__ = 554;
        tau0 = ((p0_HS / ((1.0 * P) - p0_HS)) *
                 (sigma_HS / stan::math::sqrt((1.0 * M_is))));
      }
      current_statement__ = 567;
      if (logical_eq(temporal_err, 0)) {
        current_statement__ = 565;
        length_v = M_is;
      } else {
        current_statement__ = 563;
        if (logical_eq(spatio_temporal, 1)) {
          current_statement__ = 561;
          length_v = 0;
        } else {
          current_statement__ = 559;
          length_v = D;
        }
      }
      current_statement__ = 549;
      current_statement__ = 549;
      check_greater_or_equal(function__, "M_overall", M_overall, 0);
      current_statement__ = 550;
      current_statement__ = 550;
      check_greater_or_equal(function__, "slab_scale2", slab_scale2, 0);
      current_statement__ = 551;
      current_statement__ = 551;
      check_greater_or_equal(function__, "half_nu", half_nu, 0);
      current_statement__ = 552;
      current_statement__ = 552;
      check_greater_or_equal(function__, "tau0", tau0, 0);
      current_statement__ = 553;
      current_statement__ = 553;
      check_greater_or_equal(function__, "length_v", length_v, 0);
      current_statement__ = 568;
      beta0_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 568;
      beta0_1dim__ = (logical_eq(intercept, 1) ? 1 : 0);
      current_statement__ = 568;
      validate_non_negative_index("beta0", "intercept == 1 ? 1 : 0",
                                  beta0_1dim__);
      current_statement__ = 569;
      validate_non_negative_index("z_beta", "P", P);
      current_statement__ = 570;
      lambda_HS_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 570;
      lambda_HS_1dim__ = (logical_eq(prior_coeff, 1) ? P : 0);
      current_statement__ = 570;
      validate_non_negative_index("lambda_HS", "prior_coeff == 1 ? P : 0",
                                  lambda_HS_1dim__);
      current_statement__ = 571;
      z_c2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 571;
      z_c2_1dim__ = (logical_eq(prior_coeff, 1) ? 1 : 0);
      current_statement__ = 571;
      validate_non_negative_index("z_c2", "prior_coeff == 1 ? 1 : 0",
                                  z_c2_1dim__);
      current_statement__ = 572;
      z_tau_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 572;
      z_tau_1dim__ = (logical_eq(prior_coeff, 1) ? 1 : 0);
      current_statement__ = 572;
      validate_non_negative_index("z_tau", "prior_coeff == 1 ? 1 : 0",
                                  z_tau_1dim__);
      current_statement__ = 573;
      validate_non_negative_index("v_raw", "length_v", length_v);
      current_statement__ = 574;
      sigma_v_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 574;
      sigma_v_1dim__ = ((primitive_value((primitive_value(
                          logical_eq(prior_reff, 0)) || primitive_value(
                          logical_eq(prior_reff, 1)))) && primitive_value(
                          logical_eq(spatio_temporal, 0))) ? 1 : 0);
      current_statement__ = 574;
      validate_non_negative_index("sigma_v",
                                  "((prior_reff == 0 || prior_reff == 1) && spatio_temporal == 0) ? 1 : 0",
                                  sigma_v_1dim__);
      current_statement__ = 575;
      nu_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 575;
      nu_1dim__ = ((primitive_value(logical_eq(prior_reff, 1)) &&
                     primitive_value(logical_eq(spatio_temporal, 0))) ? 1 : 0);
      current_statement__ = 575;
      validate_non_negative_index("nu",
                                  "(prior_reff == 1 && spatio_temporal == 0) ? 1 : 0",
                                  nu_1dim__);
      current_statement__ = 576;
      psi_d_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 576;
      psi_d_1dim__ = ((primitive_value(logical_eq(prior_reff, 2)) &&
                        primitive_value(logical_eq(spatio_temporal, 0))) ?
                        length_v : 0);
      current_statement__ = 576;
      validate_non_negative_index("psi_d",
                                  "(prior_reff == 2 && spatio_temporal == 0) ? length_v : 0",
                                  psi_d_1dim__);
      current_statement__ = 577;
      lambda_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 577;
      lambda_1dim__ = ((primitive_value(logical_eq(prior_reff, 2)) &&
                         primitive_value(logical_eq(spatio_temporal, 0))) ? 1
                         : 0);
      current_statement__ = 577;
      validate_non_negative_index("lambda",
                                  "(prior_reff == 2 && spatio_temporal == 0) ? 1 : 0",
                                  lambda_1dim__);
      current_statement__ = 578;
      s_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 578;
      s_raw_1dim__ = (logical_eq(spatial_err, 1) ? D : 0);
      current_statement__ = 578;
      validate_non_negative_index("s_raw", "spatial_err == 1 ? D : 0",
                                  s_raw_1dim__);
      current_statement__ = 579;
      sigma_s_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 579;
      sigma_s_1dim__ = (logical_eq(spatial_err, 1) ? 1 : 0);
      current_statement__ = 579;
      validate_non_negative_index("sigma_s", "spatial_err == 1 ? 1 : 0",
                                  sigma_s_1dim__);
      current_statement__ = 580;
      t_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 580;
      t_raw_1dim__ = (logical_eq(temporal_err, 1) ? D : 0);
      current_statement__ = 580;
      validate_non_negative_index("t_raw", "temporal_err == 1 ? D : 0",
                                  t_raw_1dim__);
      current_statement__ = 581;
      t_raw_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 581;
      t_raw_2dim__ = (logical_eq(temporal_err, 1) ? TP : 0);
      current_statement__ = 581;
      validate_non_negative_index("t_raw", "temporal_err == 1 ? TP : 0",
                                  t_raw_2dim__);
      current_statement__ = 582;
      sigma_t_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 582;
      sigma_t_1dim__ = (logical_eq(temporal_err, 1) ? 1 : 0);
      current_statement__ = 582;
      validate_non_negative_index("sigma_t", "temporal_err == 1 ? 1 : 0",
                                  sigma_t_1dim__);
      current_statement__ = 583;
      w_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 583;
      w_1dim__ = (logical_eq(likelihood, 1) ? 1 : 0);
      current_statement__ = 583;
      validate_non_negative_index("w", "likelihood == 1 ? 1 : 0", w_1dim__);
      current_statement__ = 584;
      p_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 584;
      p_1dim__ = (logical_eq(likelihood, 1) ? 1 : 0);
      current_statement__ = 584;
      validate_non_negative_index("p", "likelihood == 1 ? 1 : 0", p_1dim__);
      current_statement__ = 585;
      gamma_p0_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 585;
      gamma_p0_1dim__ = ((primitive_value(logical_eq(likelihood, 2)) &&
                           primitive_value(logical_neq(inflation, 1))) ? P :
                           0);
      current_statement__ = 585;
      validate_non_negative_index("gamma_p0",
                                  "(likelihood == 2 && inflation != 1) ? P : 0",
                                  gamma_p0_1dim__);
      current_statement__ = 586;
      gamma_p1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 586;
      gamma_p1_1dim__ = ((primitive_value(logical_eq(likelihood, 2)) &&
                           primitive_value(logical_neq(inflation, 0))) ? P :
                           0);
      current_statement__ = 586;
      validate_non_negative_index("gamma_p1",
                                  "(likelihood == 2 && inflation != 0) ? P : 0",
                                  gamma_p1_1dim__);
      current_statement__ = 587;
      gamma0_p0_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 587;
      gamma0_p0_1dim__ = ((primitive_value((primitive_value(
                            logical_eq(likelihood, 2)) && primitive_value(
                            logical_neq(inflation, 1)))) && primitive_value(
                            logical_eq(intercept, 1))) ? 1 : 0);
      current_statement__ = 587;
      validate_non_negative_index("gamma0_p0",
                                  "(likelihood == 2 && inflation != 1 && intercept == 1) ? 1 : 0",
                                  gamma0_p0_1dim__);
      current_statement__ = 588;
      gamma0_p1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 588;
      gamma0_p1_1dim__ = ((primitive_value((primitive_value(
                            logical_eq(likelihood, 2)) && primitive_value(
                            logical_neq(inflation, 0)))) && primitive_value(
                            logical_eq(intercept, 1))) ? 1 : 0);
      current_statement__ = 588;
      validate_non_negative_index("gamma0_p1",
                                  "(likelihood == 2 && inflation != 0 && intercept == 1) ? 1 : 0",
                                  gamma0_p1_1dim__);
      current_statement__ = 589;
      validate_non_negative_index("beta", "P", P);
      current_statement__ = 590;
      tau_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 590;
      tau_1dim__ = (logical_eq(prior_coeff, 1) ? 1 : 0);
      current_statement__ = 590;
      validate_non_negative_index("tau", "prior_coeff == 1 ? 1 : 0",
                                  tau_1dim__);
      current_statement__ = 591;
      c2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 591;
      c2_1dim__ = (logical_eq(prior_coeff, 1) ? 1 : 0);
      current_statement__ = 591;
      validate_non_negative_index("c2", "prior_coeff == 1 ? 1 : 0", c2_1dim__);
      current_statement__ = 592;
      lambda_tilde_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 592;
      lambda_tilde_1dim__ = (logical_eq(prior_coeff, 1) ? P : 0);
      current_statement__ = 592;
      validate_non_negative_index("lambda_tilde", "prior_coeff == 1 ? P : 0",
                                  lambda_tilde_1dim__);
      current_statement__ = 593;
      validate_non_negative_index("theta", "M_is", M_is);
      current_statement__ = 594;
      validate_non_negative_index("b1", "M_is", M_is);
      current_statement__ = 595;
      validate_non_negative_index("a1", "M_is", M_is);
      current_statement__ = 596;
      validate_non_negative_index("mu", "M_is", M_is);
      current_statement__ = 597;
      phi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 597;
      phi_1dim__ = (logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 597;
      validate_non_negative_index("phi", "likelihood == 1 ? M_is : 0",
                                  phi_1dim__);
      current_statement__ = 598;
      lambda1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 598;
      lambda1_1dim__ = (logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 598;
      validate_non_negative_index("lambda1", "likelihood == 1 ? M_is : 0",
                                  lambda1_1dim__);
      current_statement__ = 599;
      lambda2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 599;
      lambda2_1dim__ = (logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 599;
      validate_non_negative_index("lambda2", "likelihood == 1 ? M_is : 0",
                                  lambda2_1dim__);
      current_statement__ = 600;
      b2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 600;
      b2_1dim__ = (logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 600;
      validate_non_negative_index("b2", "likelihood == 1 ? M_is : 0",
                                  b2_1dim__);
      current_statement__ = 601;
      a2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 601;
      a2_1dim__ = (logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 601;
      validate_non_negative_index("a2", "likelihood == 1 ? M_is : 0",
                                  a2_1dim__);
      current_statement__ = 602;
      p0_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 602;
      p0_1dim__ = ((primitive_value(logical_eq(likelihood, 2)) &&
                     primitive_value(logical_neq(inflation, 1))) ? M_is : 0);
      current_statement__ = 602;
      validate_non_negative_index("p0",
                                  "(likelihood == 2 && inflation != 1) ? M_is : 0",
                                  p0_1dim__);
      current_statement__ = 603;
      p1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 603;
      p1_1dim__ = ((primitive_value(logical_eq(likelihood, 2)) &&
                     primitive_value(logical_neq(inflation, 0))) ? M_is : 0);
      current_statement__ = 603;
      validate_non_negative_index("p1",
                                  "(likelihood == 2 && inflation != 0) ? M_is : 0",
                                  p1_1dim__);
      current_statement__ = 604;
      validate_non_negative_index("v", "length_v", length_v);
      current_statement__ = 605;
      s_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 605;
      s_1dim__ = (logical_eq(spatial_err, 1) ? D : 0);
      current_statement__ = 605;
      validate_non_negative_index("s", "spatial_err == 1 ? D : 0", s_1dim__);
      current_statement__ = 606;
      t_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 606;
      t_1dim__ = (logical_eq(temporal_err, 1) ? D : 0);
      current_statement__ = 606;
      validate_non_negative_index("t", "temporal_err == 1 ? D : 0", t_1dim__);
      current_statement__ = 607;
      t_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 607;
      t_2dim__ = (logical_eq(temporal_err, 1) ? TP : 0);
      current_statement__ = 607;
      validate_non_negative_index("t", "temporal_err == 1 ? TP : 0", t_2dim__);
      current_statement__ = 608;
      validate_non_negative_index("reffs", "M_is", M_is);
      current_statement__ = 609;
      validate_non_negative_index("reffs_oos", "M_oos", M_oos);
      current_statement__ = 610;
      validate_non_negative_index("log_lik", "M_is", M_is);
      current_statement__ = 611;
      validate_non_negative_index("y_rep", "M_is", M_is);
      current_statement__ = 612;
      validate_non_negative_index("psi_OOS", "1", 1);
      current_statement__ = 613;
      validate_non_negative_index("v_oos", "1", 1);
      current_statement__ = 614;
      probs_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 614;
      probs_1dim__ = (logical_eq(inflation, 2) ? 3 : 0);
      current_statement__ = 614;
      validate_non_negative_index("probs", "inflation == 2 ? 3 : 0",
                                  probs_1dim__);
      current_statement__ = 615;
      theta_oos_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 615;
      theta_oos_1dim__ = (logical_neq(likelihood, 1) ? M_oos : 0);
      current_statement__ = 615;
      validate_non_negative_index("theta_oos", "likelihood != 1 ? M_oos : 0",
                                  theta_oos_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += beta0_1dim__;
      num_params_r__ += P;
      num_params_r__ += lambda_HS_1dim__;
      num_params_r__ += z_c2_1dim__;
      num_params_r__ += z_tau_1dim__;
      num_params_r__ += length_v;
      num_params_r__ += sigma_v_1dim__;
      num_params_r__ += nu_1dim__;
      num_params_r__ += psi_d_1dim__;
      num_params_r__ += lambda_1dim__;
      num_params_r__ += s_raw_1dim__;
      num_params_r__ += sigma_s_1dim__;
      num_params_r__ += t_raw_1dim__ * t_raw_2dim__;
      num_params_r__ += sigma_t_1dim__;
      num_params_r__ += w_1dim__;
      num_params_r__ += p_1dim__;
      num_params_r__ += gamma_p0_1dim__;
      num_params_r__ += gamma_p1_1dim__;
      num_params_r__ += gamma0_p0_1dim__;
      num_params_r__ += gamma0_p1_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_global_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> beta0;
      beta0 = Eigen::Matrix<local_scalar_t__, -1, 1>(beta0_1dim__);
      stan::math::fill(beta0, DUMMY_VAR__);
      
      current_statement__ = 1;
      beta0 = in__.vector(beta0_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_beta;
      z_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(P);
      stan::math::fill(z_beta, DUMMY_VAR__);
      
      current_statement__ = 2;
      z_beta = in__.vector(P);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_HS;
      lambda_HS = Eigen::Matrix<local_scalar_t__, -1, 1>(lambda_HS_1dim__);
      stan::math::fill(lambda_HS, DUMMY_VAR__);
      
      current_statement__ = 3;
      lambda_HS = in__.vector(lambda_HS_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(lambda_HS, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda_HS[(sym1__ - 1)], 0, lp__),
            "assigning variable lambda_HS");
        } else {
          current_statement__ = 3;
          assign(lambda_HS, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda_HS[(sym1__ - 1)], 0),
            "assigning variable lambda_HS");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> z_c2;
      z_c2 = Eigen::Matrix<local_scalar_t__, -1, 1>(z_c2_1dim__);
      stan::math::fill(z_c2, DUMMY_VAR__);
      
      current_statement__ = 4;
      z_c2 = in__.vector(z_c2_1dim__);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(z_c2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_c2[(sym1__ - 1)], 0, lp__),
            "assigning variable z_c2");
        } else {
          current_statement__ = 4;
          assign(z_c2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_c2[(sym1__ - 1)], 0),
            "assigning variable z_c2");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> z_tau;
      z_tau = Eigen::Matrix<local_scalar_t__, -1, 1>(z_tau_1dim__);
      stan::math::fill(z_tau, DUMMY_VAR__);
      
      current_statement__ = 5;
      z_tau = in__.vector(z_tau_1dim__);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(z_tau, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_tau[(sym1__ - 1)], 0, lp__),
            "assigning variable z_tau");
        } else {
          current_statement__ = 5;
          assign(z_tau, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_tau[(sym1__ - 1)], 0),
            "assigning variable z_tau");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> v_raw;
      v_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(length_v);
      stan::math::fill(v_raw, DUMMY_VAR__);
      
      current_statement__ = 6;
      v_raw = in__.vector(length_v);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_v;
      sigma_v = Eigen::Matrix<local_scalar_t__, -1, 1>(sigma_v_1dim__);
      stan::math::fill(sigma_v, DUMMY_VAR__);
      
      current_statement__ = 7;
      sigma_v = in__.vector(sigma_v_1dim__);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(sigma_v, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_v[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_v");
        } else {
          current_statement__ = 7;
          assign(sigma_v, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_v[(sym1__ - 1)], 0),
            "assigning variable sigma_v");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> nu;
      nu = Eigen::Matrix<local_scalar_t__, -1, 1>(nu_1dim__);
      stan::math::fill(nu, DUMMY_VAR__);
      
      current_statement__ = 8;
      nu = in__.vector(nu_1dim__);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nu[(sym1__ - 1)], 0, lp__),
            "assigning variable nu");
        } else {
          current_statement__ = 8;
          assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nu[(sym1__ - 1)], 0),
            "assigning variable nu");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_d;
      psi_d = Eigen::Matrix<local_scalar_t__, -1, 1>(psi_d_1dim__);
      stan::math::fill(psi_d, DUMMY_VAR__);
      
      current_statement__ = 9;
      psi_d = in__.vector(psi_d_1dim__);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(psi_d, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(psi_d[(sym1__ - 1)], 0, lp__),
            "assigning variable psi_d");
        } else {
          current_statement__ = 9;
          assign(psi_d, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(psi_d[(sym1__ - 1)], 0),
            "assigning variable psi_d");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda;
      lambda = Eigen::Matrix<local_scalar_t__, -1, 1>(lambda_1dim__);
      stan::math::fill(lambda, DUMMY_VAR__);
      
      current_statement__ = 10;
      lambda = in__.vector(lambda_1dim__);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda[(sym1__ - 1)], 0, lp__),
            "assigning variable lambda");
        } else {
          current_statement__ = 10;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda[(sym1__ - 1)], 0),
            "assigning variable lambda");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> s_raw;
      s_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(s_raw_1dim__);
      stan::math::fill(s_raw, DUMMY_VAR__);
      
      current_statement__ = 11;
      s_raw = in__.vector(s_raw_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_s;
      sigma_s = Eigen::Matrix<local_scalar_t__, -1, 1>(sigma_s_1dim__);
      stan::math::fill(sigma_s, DUMMY_VAR__);
      
      current_statement__ = 12;
      sigma_s = in__.vector(sigma_s_1dim__);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
        current_statement__ = 12;
        if (jacobian__) {
          current_statement__ = 12;
          assign(sigma_s, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_s[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_s");
        } else {
          current_statement__ = 12;
          assign(sigma_s, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_s[(sym1__ - 1)], 0),
            "assigning variable sigma_s");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> t_raw;
      t_raw = Eigen::Matrix<local_scalar_t__, -1, -1>(t_raw_1dim__, t_raw_2dim__);
      stan::math::fill(t_raw, DUMMY_VAR__);
      
      current_statement__ = 13;
      t_raw = in__.matrix(t_raw_1dim__, t_raw_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_t;
      sigma_t = Eigen::Matrix<local_scalar_t__, -1, 1>(sigma_t_1dim__);
      stan::math::fill(sigma_t, DUMMY_VAR__);
      
      current_statement__ = 14;
      sigma_t = in__.vector(sigma_t_1dim__);
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
        current_statement__ = 14;
        if (jacobian__) {
          current_statement__ = 14;
          assign(sigma_t, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_t[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_t");
        } else {
          current_statement__ = 14;
          assign(sigma_t, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_t[(sym1__ - 1)], 0),
            "assigning variable sigma_t");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> w;
      w = Eigen::Matrix<local_scalar_t__, -1, 1>(w_1dim__);
      stan::math::fill(w, DUMMY_VAR__);
      
      current_statement__ = 15;
      w = in__.vector(w_1dim__);
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
        current_statement__ = 15;
        if (jacobian__) {
          current_statement__ = 15;
          assign(w, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(w[(sym1__ - 1)], 0.001, 0.999, lp__),
            "assigning variable w");
        } else {
          current_statement__ = 15;
          assign(w, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(w[(sym1__ - 1)], 0.001, 0.999),
            "assigning variable w");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, 1>(p_1dim__);
      stan::math::fill(p, DUMMY_VAR__);
      
      current_statement__ = 16;
      p = in__.vector(p_1dim__);
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
        current_statement__ = 16;
        if (jacobian__) {
          current_statement__ = 16;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(p[(sym1__ - 1)], 0.001, 0.999, lp__),
            "assigning variable p");
        } else {
          current_statement__ = 16;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(p[(sym1__ - 1)], 0.001, 0.999),
            "assigning variable p");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_p0;
      gamma_p0 = Eigen::Matrix<local_scalar_t__, -1, 1>(gamma_p0_1dim__);
      stan::math::fill(gamma_p0, DUMMY_VAR__);
      
      current_statement__ = 17;
      gamma_p0 = in__.vector(gamma_p0_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_p1;
      gamma_p1 = Eigen::Matrix<local_scalar_t__, -1, 1>(gamma_p1_1dim__);
      stan::math::fill(gamma_p1, DUMMY_VAR__);
      
      current_statement__ = 18;
      gamma_p1 = in__.vector(gamma_p1_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma0_p0;
      gamma0_p0 = Eigen::Matrix<local_scalar_t__, -1, 1>(gamma0_p0_1dim__);
      stan::math::fill(gamma0_p0, DUMMY_VAR__);
      
      current_statement__ = 19;
      gamma0_p0 = in__.vector(gamma0_p0_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma0_p1;
      gamma0_p1 = Eigen::Matrix<local_scalar_t__, -1, 1>(gamma0_p1_1dim__);
      stan::math::fill(gamma0_p1, DUMMY_VAR__);
      
      current_statement__ = 20;
      gamma0_p1 = in__.vector(gamma0_p1_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(P);
      stan::math::fill(beta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> tau;
      tau = Eigen::Matrix<local_scalar_t__, -1, 1>(tau_1dim__);
      stan::math::fill(tau, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> c2;
      c2 = Eigen::Matrix<local_scalar_t__, -1, 1>(c2_1dim__);
      stan::math::fill(c2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_tilde;
      lambda_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(lambda_tilde_1dim__);
      stan::math::fill(lambda_tilde, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, 1>(M_is);
      stan::math::fill(theta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> b1;
      b1 = Eigen::Matrix<local_scalar_t__, -1, 1>(M_is);
      stan::math::fill(b1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> a1;
      a1 = Eigen::Matrix<local_scalar_t__, -1, 1>(M_is);
      stan::math::fill(a1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(M_is);
      stan::math::fill(mu, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(phi_1dim__);
      stan::math::fill(phi, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda1;
      lambda1 = Eigen::Matrix<local_scalar_t__, -1, 1>(lambda1_1dim__);
      stan::math::fill(lambda1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda2;
      lambda2 = Eigen::Matrix<local_scalar_t__, -1, 1>(lambda2_1dim__);
      stan::math::fill(lambda2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> b2;
      b2 = Eigen::Matrix<local_scalar_t__, -1, 1>(b2_1dim__);
      stan::math::fill(b2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> a2;
      a2 = Eigen::Matrix<local_scalar_t__, -1, 1>(a2_1dim__);
      stan::math::fill(a2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p0;
      p0 = Eigen::Matrix<local_scalar_t__, -1, 1>(p0_1dim__);
      stan::math::fill(p0, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p1;
      p1 = Eigen::Matrix<local_scalar_t__, -1, 1>(p1_1dim__);
      stan::math::fill(p1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> v;
      v = Eigen::Matrix<local_scalar_t__, -1, 1>(length_v);
      stan::math::fill(v, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> s;
      s = Eigen::Matrix<local_scalar_t__, -1, 1>(s_1dim__);
      stan::math::fill(s, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> t;
      t = Eigen::Matrix<local_scalar_t__, -1, -1>(t_1dim__, t_2dim__);
      stan::math::fill(t, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> reffs;
      reffs = Eigen::Matrix<local_scalar_t__, -1, 1>(M_is);
      stan::math::fill(reffs, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> reffs_oos;
      reffs_oos = Eigen::Matrix<local_scalar_t__, -1, 1>(M_oos);
      stan::math::fill(reffs_oos, DUMMY_VAR__);
      
      current_statement__ = 49;
      if (logical_eq(prior_coeff, 0)) {
        current_statement__ = 47;
        assign(beta, nil_index_list(), z_beta, "assigning variable beta");
      } else {
        current_statement__ = 46;
        if (logical_eq(prior_coeff, 1)) {
          current_statement__ = 41;
          assign(tau, cons_list(index_uni(1), nil_index_list()),
            (tau0 * z_tau[(1 - 1)]), "assigning variable tau");
          current_statement__ = 42;
          assign(c2, cons_list(index_uni(1), nil_index_list()),
            (slab_scale2 * z_c2[(1 - 1)]), "assigning variable c2");
          current_statement__ = 43;
          assign(lambda_tilde, nil_index_list(),
            stan::math::sqrt(
              elt_divide(multiply(c2[(1 - 1)], square(lambda_HS)),
                add(c2[(1 - 1)],
                  multiply(square(tau[(1 - 1)]), square(lambda_HS))))),
            "assigning variable lambda_tilde");
          current_statement__ = 44;
          assign(beta, nil_index_list(),
            elt_multiply(multiply(tau[(1 - 1)], lambda_tilde), z_beta),
            "assigning variable beta");
        } 
      }
      current_statement__ = 60;
      if (logical_eq(spatio_temporal, 0)) {
        current_statement__ = 58;
        if (logical_eq(prior_reff, 0)) {
          current_statement__ = 56;
          assign(v, nil_index_list(), multiply(sigma_v[(1 - 1)], v_raw),
            "assigning variable v");
        } else {
          current_statement__ = 55;
          if (logical_eq(prior_reff, 1)) {
            current_statement__ = 53;
            assign(v, nil_index_list(), multiply(sigma_v[(1 - 1)], v_raw),
              "assigning variable v");
          } else {
            current_statement__ = 52;
            if (logical_eq(prior_reff, 2)) {
              current_statement__ = 50;
              assign(v, nil_index_list(),
                elt_multiply(
                  multiply(stan::math::sqrt(psi_d), lambda[(1 - 1)]), v_raw),
                "assigning variable v");
            } 
          }
        }
      } 
      current_statement__ = 115;
      if ((primitive_value(logical_eq(spatial_err, 0)) && primitive_value(
          logical_eq(temporal_err, 0)))) {
        current_statement__ = 110;
        assign(reffs, nil_index_list(), v, "assigning variable reffs");
        current_statement__ = 113;
        for (int i = 1; i <= M_oos; ++i) {
          current_statement__ = 111;
          assign(reffs_oos, cons_list(index_uni(i), nil_index_list()), 0,
            "assigning variable reffs_oos");}
      } else {
        current_statement__ = 71;
        if ((primitive_value(logical_eq(spatial_err, 1)) && primitive_value(
            logical_eq(temporal_err, 0)))) {
          current_statement__ = 63;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 61;
            assign(s,
              cons_list(index_uni(indices_spat[(i - 1)]), nil_index_list()),
              ((sigma_s[(1 - 1)] * s_raw[(i - 1)]) / scales_ICAR[(i - 1)]),
              "assigning variable s");}
          current_statement__ = 66;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 64;
            assign(reffs, cons_list(index_uni(i), nil_index_list()),
              (v[(i - 1)] + s[(indices_is[(i - 1)] - 1)]),
              "assigning variable reffs");}
          current_statement__ = 69;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 67;
            assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
              s[(indices_oos[(i - 1)] - 1)], "assigning variable reffs_oos");
          }
        } 
        current_statement__ = 88;
        if ((primitive_value(logical_eq(spatial_err, 0)) && primitive_value(
            logical_eq(temporal_err, 1)))) {
          current_statement__ = 72;
          assign(t, nil_index_list(),
            divide(multiply(sigma_t[(1 - 1)], t_raw), scale_factor_RW1),
            "assigning variable t");
          current_statement__ = 75;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 73;
            assign(reffs, cons_list(index_uni(i), nil_index_list()),
              (v[(indices_temp[(indices_is[(i - 1)] - 1)][(1 - 1)] - 1)] +
                rvalue(t,
                  cons_list(
                    index_uni(indices_temp[(indices_is[(i - 1)] - 1)][
                    (1 - 1)]),
                    cons_list(
                      index_uni(indices_temp[(indices_is[(i - 1)] - 1)][
                      (2 - 1)]), nil_index_list())), "t")),
              "assigning variable reffs");}
          current_statement__ = 86;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 78;
            if (logical_eq(cat_ios[(i - 1)], 1)) {
              current_statement__ = 76;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()), 0,
                "assigning variable reffs_oos");
            } 
            current_statement__ = 81;
            if (logical_eq(cat_ios[(i - 1)], 2)) {
              current_statement__ = 79;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                v[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)],
                "assigning variable reffs_oos");
            } 
            current_statement__ = 84;
            if (logical_eq(cat_ios[(i - 1)], 3)) {
              current_statement__ = 82;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                (v[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)] +
                  rvalue(t,
                    cons_list(
                      index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                      (1 - 1)]),
                      cons_list(
                        index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                        (2 - 1)]), nil_index_list())), "t")),
                "assigning variable reffs_oos");
            } }
        } 
        current_statement__ = 108;
        if ((primitive_value(logical_eq(spatial_err, 1)) && primitive_value(
            logical_eq(temporal_err, 1)))) {
          current_statement__ = 89;
          assign(t, nil_index_list(),
            divide(multiply(sigma_t[(1 - 1)], t_raw), scale_factor_RW1),
            "assigning variable t");
          current_statement__ = 92;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 90;
            assign(s, cons_list(index_uni(i), nil_index_list()),
              ((sigma_s[(1 - 1)] * s_raw[(indices_spat[(i - 1)] - 1)]) /
                scales_ICAR[(indices_spat[(i - 1)] - 1)]),
              "assigning variable s");}
          current_statement__ = 95;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 93;
            assign(reffs, cons_list(index_uni(i), nil_index_list()),
              (s[(indices_temp[(indices_is[(i - 1)] - 1)][(1 - 1)] - 1)] +
                rvalue(t,
                  cons_list(
                    index_uni(indices_temp[(indices_is[(i - 1)] - 1)][
                    (1 - 1)]),
                    cons_list(
                      index_uni(indices_temp[(indices_is[(i - 1)] - 1)][
                      (2 - 1)]), nil_index_list())), "t")),
              "assigning variable reffs");}
          current_statement__ = 106;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 98;
            if (logical_eq(cat_ios[(i - 1)], 1)) {
              current_statement__ = 96;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                (s[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)] +
                  rvalue(t,
                    cons_list(
                      index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                      (1 - 1)]),
                      cons_list(
                        index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                        (2 - 1)]), nil_index_list())), "t")),
                "assigning variable reffs_oos");
            } 
            current_statement__ = 101;
            if (logical_eq(cat_ios[(i - 1)], 2)) {
              current_statement__ = 99;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                (s[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)] +
                  rvalue(t,
                    cons_list(
                      index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                      (1 - 1)]),
                      cons_list(
                        index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                        (2 - 1)]), nil_index_list())), "t")),
                "assigning variable reffs_oos");
            } 
            current_statement__ = 104;
            if (logical_eq(cat_ios[(i - 1)], 3)) {
              current_statement__ = 102;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                (s[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)] +
                  rvalue(t,
                    cons_list(
                      index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                      (1 - 1)]),
                      cons_list(
                        index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                        (2 - 1)]), nil_index_list())), "t")),
                "assigning variable reffs_oos");
            } }
        } 
      }
      current_statement__ = 205;
      if (logical_eq(likelihood, 0)) {
        current_statement__ = 203;
        for (int i = 1; i <= M_is; ++i) {
          current_statement__ = 193;
          if (logical_eq(intercept, 0)) {
            current_statement__ = 191;
            assign(mu, cons_list(index_uni(i), nil_index_list()),
              inv_logit(
                (multiply(
                   rvalue(X,
                     cons_list(index_uni(i),
                       cons_list(index_omni(), nil_index_list())), "X"),
                   beta) + reffs[(i - 1)])), "assigning variable mu");
          } else {
            current_statement__ = 189;
            assign(mu, cons_list(index_uni(i), nil_index_list()),
              inv_logit(
                ((beta0[(1 - 1)] +
                   multiply(
                     rvalue(X,
                       cons_list(index_uni(i),
                         cons_list(index_omni(), nil_index_list())), "X"),
                     beta)) + reffs[(i - 1)])), "assigning variable mu");
          }
          current_statement__ = 194;
          assign(theta, cons_list(index_uni(i), nil_index_list()),
            mu[(i - 1)], "assigning variable theta");
          current_statement__ = 201;
          if (logical_eq(deff, 0)) {
            current_statement__ = 198;
            assign(b1, cons_list(index_uni(i), nil_index_list()),
              ((1 - mu[(i - 1)]) *
                (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) - 1)),
              "assigning variable b1");
            current_statement__ = 199;
            assign(a1, cons_list(index_uni(i), nil_index_list()),
              (mu[(i - 1)] *
                (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) - 1)),
              "assigning variable a1");
          } else {
            current_statement__ = 195;
            assign(b1, cons_list(index_uni(i), nil_index_list()),
              ((1 - mu[(i - 1)]) * disp[(i - 1)]), "assigning variable b1");
            current_statement__ = 196;
            assign(a1, cons_list(index_uni(i), nil_index_list()),
              (mu[(i - 1)] * disp[(i - 1)]), "assigning variable a1");
          }}
      } else {
        current_statement__ = 188;
        if (logical_eq(likelihood, 1)) {
          current_statement__ = 186;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 176;
            if (logical_eq(intercept, 0)) {
              current_statement__ = 174;
              assign(lambda2, cons_list(index_uni(i), nil_index_list()),
                inv_logit(
                  (multiply(
                     rvalue(X,
                       cons_list(index_uni(i),
                         cons_list(index_omni(), nil_index_list())), "X"),
                     beta) + reffs[(i - 1)])), "assigning variable lambda2");
            } else {
              current_statement__ = 172;
              assign(lambda2, cons_list(index_uni(i), nil_index_list()),
                inv_logit(
                  ((beta0[(1 - 1)] +
                     multiply(
                       rvalue(X,
                         cons_list(index_uni(i),
                           cons_list(index_omni(), nil_index_list())), "X"),
                       beta)) + reffs[(i - 1)])),
                "assigning variable lambda2");
            }
            current_statement__ = 177;
            assign(lambda1, cons_list(index_uni(i), nil_index_list()),
              (lambda2[(i - 1)] +
                (w[(1 - 1)] *
                  stan::math::fmin(((1 - lambda2[(i - 1)]) / p[(1 - 1)]),
                    stan::math::sqrt(
                      (disp[(i - 1)] / (p[(1 - 1)] * (1 - p[(1 - 1)]))))))),
              "assigning variable lambda1");
            current_statement__ = 178;
            assign(mu, cons_list(index_uni(i), nil_index_list()),
              ((p[(1 - 1)] * lambda1[(i - 1)]) +
                ((1 - p[(1 - 1)]) * lambda2[(i - 1)])),
              "assigning variable mu");
            current_statement__ = 179;
            assign(theta, cons_list(index_uni(i), nil_index_list()),
              mu[(i - 1)], "assigning variable theta");
            current_statement__ = 180;
            assign(phi, cons_list(index_uni(i), nil_index_list()),
              (((mu[(i - 1)] * (1 - mu[(i - 1)])) - disp[(i - 1)]) /
                (disp[(i - 1)] -
                  (((p[(1 - 1)] * (1 - p[(1 - 1)])) * pow(w[(1 - 1)], 2)) *
                    pow(
                      stan::math::fmin(((1 - lambda2[(i - 1)]) / p[(1 - 1)]),
                        stan::math::sqrt(
                          (disp[(i - 1)] / (p[(1 - 1)] * (1 - p[(1 - 1)]))))),
                      2)))), "assigning variable phi");
            current_statement__ = 181;
            assign(b1, cons_list(index_uni(i), nil_index_list()),
              ((1 - lambda2[(i - 1)]) * phi[(i - 1)]),
              "assigning variable b1");
            current_statement__ = 182;
            assign(a1, cons_list(index_uni(i), nil_index_list()),
              (lambda2[(i - 1)] * phi[(i - 1)]), "assigning variable a1");
            current_statement__ = 183;
            assign(b2, cons_list(index_uni(i), nil_index_list()),
              ((1 - lambda1[(i - 1)]) * phi[(i - 1)]),
              "assigning variable b2");
            current_statement__ = 184;
            assign(a2, cons_list(index_uni(i), nil_index_list()),
              (lambda1[(i - 1)] * phi[(i - 1)]), "assigning variable a2");}
        } else {
          current_statement__ = 171;
          if (logical_eq(likelihood, 2)) {
            current_statement__ = 169;
            for (int i = 1; i <= M_is; ++i) {
              current_statement__ = 137;
              if (logical_eq(intercept, 0)) {
                current_statement__ = 135;
                assign(mu, cons_list(index_uni(i), nil_index_list()),
                  inv_logit(
                    (multiply(
                       rvalue(X,
                         cons_list(index_uni(i),
                           cons_list(index_omni(), nil_index_list())), "X"),
                       beta) + reffs[(i - 1)])), "assigning variable mu");
              } else {
                current_statement__ = 133;
                assign(mu, cons_list(index_uni(i), nil_index_list()),
                  inv_logit(
                    ((beta0[(1 - 1)] +
                       multiply(
                         rvalue(X,
                           cons_list(index_uni(i),
                             cons_list(index_omni(), nil_index_list())), "X"),
                         beta)) + reffs[(i - 1)])), "assigning variable mu");
              }
              current_statement__ = 144;
              if (logical_neq(inflation, 1)) {
                current_statement__ = 142;
                if (logical_eq(intercept, 0)) {
                  current_statement__ = 140;
                  assign(p0, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      multiply(
                        rvalue(X,
                          cons_list(index_uni(i),
                            cons_list(index_omni(), nil_index_list())), "X"),
                        gamma_p0)), "assigning variable p0");
                } else {
                  current_statement__ = 138;
                  assign(p0, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      (gamma0_p0[(1 - 1)] +
                        multiply(
                          rvalue(X,
                            cons_list(index_uni(i),
                              cons_list(index_omni(), nil_index_list())),
                            "X"), gamma_p0))), "assigning variable p0");
                }
              } 
              current_statement__ = 151;
              if (logical_neq(inflation, 0)) {
                current_statement__ = 149;
                if (logical_eq(intercept, 0)) {
                  current_statement__ = 147;
                  assign(p1, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      multiply(
                        rvalue(X,
                          cons_list(index_uni(i),
                            cons_list(index_omni(), nil_index_list())), "X"),
                        gamma_p1)), "assigning variable p1");
                } else {
                  current_statement__ = 145;
                  assign(p1, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      (gamma0_p1[(1 - 1)] +
                        multiply(
                          rvalue(X,
                            cons_list(index_uni(i),
                              cons_list(index_omni(), nil_index_list())),
                            "X"), gamma_p1))), "assigning variable p1");
                }
              } 
              current_statement__ = 160;
              if (logical_eq(inflation, 0)) {
                current_statement__ = 158;
                assign(theta, cons_list(index_uni(i), nil_index_list()),
                  ((1 - p0[(i - 1)]) * mu[(i - 1)]),
                  "assigning variable theta");
              } else {
                current_statement__ = 157;
                if (logical_eq(inflation, 1)) {
                  current_statement__ = 155;
                  assign(theta, cons_list(index_uni(i), nil_index_list()),
                    (((1 - p1[(i - 1)]) * mu[(i - 1)]) + p1[(i - 1)]),
                    "assigning variable theta");
                } else {
                  current_statement__ = 154;
                  if (logical_eq(inflation, 2)) {
                    current_statement__ = 152;
                    assign(theta, cons_list(index_uni(i), nil_index_list()),
                      ((((1 - p0[(i - 1)]) - p1[(i - 1)]) * mu[(i - 1)]) +
                        p1[(i - 1)]), "assigning variable theta");
                  } 
                }
              }
              current_statement__ = 167;
              if (logical_eq(deff, 0)) {
                current_statement__ = 164;
                assign(b1, cons_list(index_uni(i), nil_index_list()),
                  ((1 - mu[(i - 1)]) *
                    (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) - 1)),
                  "assigning variable b1");
                current_statement__ = 165;
                assign(a1, cons_list(index_uni(i), nil_index_list()),
                  (mu[(i - 1)] *
                    (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) - 1)),
                  "assigning variable a1");
              } else {
                current_statement__ = 161;
                assign(b1, cons_list(index_uni(i), nil_index_list()),
                  ((1 - mu[(i - 1)]) * disp[(i - 1)]),
                  "assigning variable b1");
                current_statement__ = 162;
                assign(a1, cons_list(index_uni(i), nil_index_list()),
                  (mu[(i - 1)] * disp[(i - 1)]), "assigning variable a1");
              }}
          } else {
            current_statement__ = 132;
            if (logical_eq(likelihood, 3)) {
              current_statement__ = 130;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 120;
                if (logical_eq(intercept, 0)) {
                  current_statement__ = 118;
                  assign(mu, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      (multiply(
                         rvalue(X,
                           cons_list(index_uni(i),
                             cons_list(index_omni(), nil_index_list())), "X"),
                         beta) + reffs[(i - 1)])), "assigning variable mu");
                } else {
                  current_statement__ = 116;
                  assign(mu, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      ((beta0[(1 - 1)] +
                         multiply(
                           rvalue(X,
                             cons_list(index_uni(i),
                               cons_list(index_omni(), nil_index_list())),
                             "X"), beta)) + reffs[(i - 1)])),
                    "assigning variable mu");
                }
                current_statement__ = 121;
                assign(theta, cons_list(index_uni(i), nil_index_list()),
                  (mu[(i - 1)] * (1 - pow((1 - mu[(i - 1)]), m_d[(i - 1)]))),
                  "assigning variable theta");
                current_statement__ = 128;
                if (logical_eq(deff, 0)) {
                  current_statement__ = 125;
                  assign(b1, cons_list(index_uni(i), nil_index_list()),
                    ((1 - mu[(i - 1)]) *
                      (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) -
                        1)), "assigning variable b1");
                  current_statement__ = 126;
                  assign(a1, cons_list(index_uni(i), nil_index_list()),
                    (mu[(i - 1)] *
                      (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) -
                        1)), "assigning variable a1");
                } else {
                  current_statement__ = 122;
                  assign(b1, cons_list(index_uni(i), nil_index_list()),
                    ((1 - mu[(i - 1)]) * disp[(i - 1)]),
                    "assigning variable b1");
                  current_statement__ = 123;
                  assign(a1, cons_list(index_uni(i), nil_index_list()),
                    (mu[(i - 1)] * disp[(i - 1)]), "assigning variable a1");
                }}
            } 
          }
        }
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "tau[sym1__]", tau[(sym1__ - 1)],
                               0);}
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= c2_1dim__; ++sym1__) {
        current_statement__ = 23;
        current_statement__ = 23;
        check_greater_or_equal(function__, "c2[sym1__]", c2[(sym1__ - 1)], 0);
      }
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= lambda_tilde_1dim__; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "lambda_tilde[sym1__]",
                               lambda_tilde[(sym1__ - 1)], 0);}
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 25;
        current_statement__ = 25;
        check_greater_or_equal(function__, "theta[sym1__]",
                               theta[(sym1__ - 1)], 0);}
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 25;
        current_statement__ = 25;
        check_less_or_equal(function__, "theta[sym1__]", theta[(sym1__ - 1)],
                            1);}
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_greater_or_equal(function__, "b1[sym1__]", b1[(sym1__ - 1)], 0);
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "a1[sym1__]", a1[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_greater_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_less_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], 1);}
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_greater_or_equal(function__, "phi[sym1__]", phi[(sym1__ - 1)],
                               0);}
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
        current_statement__ = 30;
        current_statement__ = 30;
        check_greater_or_equal(function__, "lambda1[sym1__]",
                               lambda1[(sym1__ - 1)], 0);}
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
        current_statement__ = 30;
        current_statement__ = 30;
        check_less_or_equal(function__, "lambda1[sym1__]",
                            lambda1[(sym1__ - 1)], 1);}
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 31;
        current_statement__ = 31;
        check_greater_or_equal(function__, "lambda2[sym1__]",
                               lambda2[(sym1__ - 1)], 0);}
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 31;
        current_statement__ = 31;
        check_less_or_equal(function__, "lambda2[sym1__]",
                            lambda2[(sym1__ - 1)], 1);}
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= b2_1dim__; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "b2[sym1__]", b2[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_greater_or_equal(function__, "a2[sym1__]", a2[(sym1__ - 1)], 0);
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_greater_or_equal(function__, "p0[sym1__]", p0[(sym1__ - 1)], 0);
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_less_or_equal(function__, "p0[sym1__]", p0[(sym1__ - 1)], 1);}
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_greater_or_equal(function__, "p1[sym1__]", p1[(sym1__ - 1)], 0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_less_or_equal(function__, "p1[sym1__]", p1[(sym1__ - 1)], 1);}
      {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 379;
        pos = 1;
        current_statement__ = 382;
        if (logical_eq(intercept, 1)) {
          current_statement__ = 380;
          lp_accum__.add(
            normal_lpdf<propto__>(beta0[(1 - 1)], 0, sigma_coeff));
        } 
        current_statement__ = 391;
        if (logical_eq(prior_coeff, 0)) {
          current_statement__ = 389;
          lp_accum__.add(normal_lpdf<propto__>(z_beta, 0, sigma_coeff));
        } else {
          current_statement__ = 388;
          if (logical_eq(prior_coeff, 1)) {
            current_statement__ = 383;
            lp_accum__.add(normal_lpdf<propto__>(z_beta, 0, 1));
            current_statement__ = 384;
            lp_accum__.add(cauchy_lpdf<propto__>(lambda_HS, 0, 1));
            current_statement__ = 385;
            lp_accum__.add(cauchy_lpdf<propto__>(z_tau[(1 - 1)], 0, 1));
            current_statement__ = 386;
            lp_accum__.add(
              inv_gamma_lpdf<propto__>(z_c2[(1 - 1)], half_nu, half_nu));
          } 
        }
        current_statement__ = 409;
        if (logical_eq(spatio_temporal, 0)) {
          current_statement__ = 407;
          if (logical_eq(prior_reff, 0)) {
            current_statement__ = 403;
            lp_accum__.add(std_normal_lpdf<propto__>(v_raw));
            current_statement__ = 404;
            if (logical_lt(sigma_v[(1 - 1)], 0)) {
              current_statement__ = 404;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 404;
              lp_accum__.add(-normal_ccdf_log(0, 0, sigma_unstr));
            }
            current_statement__ = 405;
            lp_accum__.add(
              normal_lpdf<propto__>(sigma_v[(1 - 1)], 0, sigma_unstr));
          } else {
            current_statement__ = 402;
            if (logical_eq(prior_reff, 1)) {
              current_statement__ = 397;
              lp_accum__.add(
                student_t_lpdf<propto__>(v_raw, nu[(1 - 1)], 0, 1));
              current_statement__ = 398;
              if (logical_lt(sigma_v[(1 - 1)], 0)) {
                current_statement__ = 398;
                lp_accum__.add(stan::math::negative_infinity());
              } else {
                current_statement__ = 398;
                lp_accum__.add(-normal_ccdf_log(0, 0, sigma_unstr));
              }
              current_statement__ = 399;
              lp_accum__.add(
                normal_lpdf<propto__>(sigma_v[(1 - 1)], 0, sigma_unstr));
              current_statement__ = 400;
              lp_accum__.add(exponential_lpdf<propto__>(nu[(1 - 1)], 0.1));
            } else {
              current_statement__ = 396;
              if (logical_eq(prior_reff, 2)) {
                current_statement__ = 392;
                lp_accum__.add(std_normal_lpdf<propto__>(v_raw));
                current_statement__ = 393;
                lp_accum__.add(gamma_lpdf<propto__>(psi_d, 0.5, 1));
                current_statement__ = 394;
                lp_accum__.add(
                  normal_lpdf<propto__>(lambda[(1 - 1)], 0, sigma_unstr));
              } 
            }
          }
        } 
        current_statement__ = 423;
        if (logical_eq(spatial_err, 1)) {
          current_statement__ = 410;
          if (logical_lt(sigma_s[(1 - 1)], 0)) {
            current_statement__ = 410;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 410;
            lp_accum__.add(-normal_ccdf_log(0, 0, 2.5));
          }
          current_statement__ = 411;
          lp_accum__.add(normal_lpdf<propto__>(sigma_s[(1 - 1)], 0, 2.5));
          current_statement__ = 420;
          for (int k = 1; k <= N_comp; ++k) {
            current_statement__ = 414;
            if (logical_eq(dim_c[(k - 1)], 1)) {
              current_statement__ = 412;
              lp_accum__.add(
                normal_lpdf<propto__>(segment(s_raw, pos, dim_c[(k - 1)]), 0,
                  1));
            } 
            current_statement__ = 417;
            if (logical_gt(dim_c[(k - 1)], 1)) {
              current_statement__ = 415;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  sum(segment(s_raw, pos, dim_c[(k - 1)])), 0,
                  (0.001 * dim_c[(k - 1)])));
            } 
            current_statement__ = 418;
            pos = (pos + dim_c[(k - 1)]);}
          current_statement__ = 421;
          lp_accum__.add(
            (-0.5 *
              dot_self(
                subtract(
                  rvalue(s_raw,
                    cons_list(index_multi(node1), nil_index_list()), "s_raw"),
                  rvalue(s_raw,
                    cons_list(index_multi(node2), nil_index_list()), "s_raw")))));
        } 
        current_statement__ = 431;
        if (logical_eq(temporal_err, 1)) {
          current_statement__ = 424;
          if (logical_lt(sigma_t[(1 - 1)], 0)) {
            current_statement__ = 424;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 424;
            lp_accum__.add(-normal_ccdf_log(0, 0, 2.5));
          }
          current_statement__ = 425;
          lp_accum__.add(normal_lpdf<propto__>(sigma_t[(1 - 1)], 0, 2.5));
          current_statement__ = 429;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 426;
            lp_accum__.add(
              normal_lpdf<propto__>(
                sum(
                  rvalue(t_raw,
                    cons_list(index_uni(i),
                      cons_list(index_omni(), nil_index_list())), "t_raw")),
                0, (0.001 * TP)));
            current_statement__ = 427;
            lp_accum__.add(
              (-0.5 *
                dot_self(
                  subtract(
                    rvalue(t_raw,
                      cons_list(index_uni(i),
                        cons_list(index_multi(node1_t), nil_index_list())),
                      "t_raw"),
                    rvalue(t_raw,
                      cons_list(index_uni(i),
                        cons_list(index_multi(node2_t), nil_index_list())),
                      "t_raw")))));}
        } 
        current_statement__ = 435;
        if (logical_eq(likelihood, 1)) {
          current_statement__ = 432;
          lp_accum__.add(beta_lpdf<propto__>(p[(1 - 1)], 2, 2));
          current_statement__ = 433;
          lp_accum__.add(uniform_lpdf<propto__>(w[(1 - 1)], 0.001, 0.999));
        } 
        current_statement__ = 449;
        if (logical_eq(likelihood, 2)) {
          current_statement__ = 441;
          if (logical_neq(inflation, 1)) {
            current_statement__ = 436;
            lp_accum__.add(normal_lpdf<propto__>(gamma_p0, 0, 2.5));
            current_statement__ = 439;
            if (logical_eq(intercept, 1)) {
              current_statement__ = 437;
              lp_accum__.add(
                normal_lpdf<propto__>(gamma0_p0[(1 - 1)], 0, 2.5));
            } 
          } 
          current_statement__ = 447;
          if (logical_neq(inflation, 0)) {
            current_statement__ = 442;
            lp_accum__.add(normal_lpdf<propto__>(gamma_p1, 0, 2.5));
            current_statement__ = 445;
            if (logical_eq(intercept, 1)) {
              current_statement__ = 443;
              lp_accum__.add(
                normal_lpdf<propto__>(gamma0_p1[(1 - 1)], 0, 2.5));
            } 
          } 
        } 
        current_statement__ = 489;
        if (logical_eq(likelihood, 0)) {
          current_statement__ = 487;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 485;
            lp_accum__.add(
              beta_lpdf<false>(y[(i - 1)], a1[(i - 1)], b1[(i - 1)]));}
        } else {
          current_statement__ = 484;
          if (logical_eq(likelihood, 1)) {
            current_statement__ = 482;
            for (int i = 1; i <= M_is; ++i) {
              current_statement__ = 480;
              lp_accum__.add(
                log_mix(p[(1 - 1)],
                  beta_lpdf<false>(y[(i - 1)], a2[(i - 1)], b2[(i - 1)]),
                  beta_lpdf<false>(y[(i - 1)], a1[(i - 1)], b1[(i - 1)])));}
          } else {
            current_statement__ = 479;
            if (logical_eq(likelihood, 2)) {
              current_statement__ = 477;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 475;
                if ((primitive_value(logical_eq(y[(i - 1)], 0)) &&
                    primitive_value(logical_neq(inflation, 1)))) {
                  current_statement__ = 473;
                  lp_accum__.add(stan::math::log(p0[(i - 1)]));
                } else {
                  current_statement__ = 472;
                  if ((primitive_value(logical_eq(y[(i - 1)], 1)) &&
                      primitive_value(logical_neq(inflation, 0)))) {
                    current_statement__ = 470;
                    lp_accum__.add(stan::math::log(p1[(i - 1)]));
                  } else {
                    current_statement__ = 459;
                    lp_accum__.add(
                      beta_lpdf<false>(y[(i - 1)], a1[(i - 1)], b1[(i - 1)]));
                    current_statement__ = 468;
                    if (logical_eq(inflation, 0)) {
                      current_statement__ = 466;
                      lp_accum__.add(stan::math::log((1 - p0[(i - 1)])));
                    } else {
                      current_statement__ = 465;
                      if (logical_eq(inflation, 1)) {
                        current_statement__ = 463;
                        lp_accum__.add(stan::math::log((1 - p1[(i - 1)])));
                      } else {
                        current_statement__ = 462;
                        if (logical_eq(inflation, 2)) {
                          current_statement__ = 460;
                          lp_accum__.add(
                            stan::math::log(
                              ((1 - p0[(i - 1)]) - p1[(i - 1)])));
                        } 
                      }
                    }
                  }
                }}
            } else {
              current_statement__ = 458;
              if (logical_eq(likelihood, 3)) {
                current_statement__ = 456;
                for (int i = 1; i <= M_is; ++i) {
                  current_statement__ = 454;
                  if (logical_eq(y[(i - 1)], 0)) {
                    current_statement__ = 452;
                    lp_accum__.add(
                      (m_d[(i - 1)] * stan::math::log((1 - mu[(i - 1)]))));
                  } else {
                    current_statement__ = 450;
                    lp_accum__.add(
                      (stan::math::log(
                         (1 - pow((1 - mu[(i - 1)]), m_d[(i - 1)]))) +
                        beta_lpdf<false>(y[(i - 1)], a1[(i - 1)],
                          b1[(i - 1)])));
                  }}
              } 
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_global_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> beta0;
      beta0 = Eigen::Matrix<double, -1, 1>(beta0_1dim__);
      stan::math::fill(beta0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      beta0 = in__.vector(beta0_1dim__);
      Eigen::Matrix<double, -1, 1> z_beta;
      z_beta = Eigen::Matrix<double, -1, 1>(P);
      stan::math::fill(z_beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      z_beta = in__.vector(P);
      Eigen::Matrix<double, -1, 1> lambda_HS;
      lambda_HS = Eigen::Matrix<double, -1, 1>(lambda_HS_1dim__);
      stan::math::fill(lambda_HS, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      lambda_HS = in__.vector(lambda_HS_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(lambda_HS, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(lambda_HS[(sym1__ - 1)], 0),
          "assigning variable lambda_HS");}
      Eigen::Matrix<double, -1, 1> z_c2;
      z_c2 = Eigen::Matrix<double, -1, 1>(z_c2_1dim__);
      stan::math::fill(z_c2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      z_c2 = in__.vector(z_c2_1dim__);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(z_c2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(z_c2[(sym1__ - 1)], 0),
          "assigning variable z_c2");}
      Eigen::Matrix<double, -1, 1> z_tau;
      z_tau = Eigen::Matrix<double, -1, 1>(z_tau_1dim__);
      stan::math::fill(z_tau, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      z_tau = in__.vector(z_tau_1dim__);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(z_tau, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(z_tau[(sym1__ - 1)], 0),
          "assigning variable z_tau");}
      Eigen::Matrix<double, -1, 1> v_raw;
      v_raw = Eigen::Matrix<double, -1, 1>(length_v);
      stan::math::fill(v_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      v_raw = in__.vector(length_v);
      Eigen::Matrix<double, -1, 1> sigma_v;
      sigma_v = Eigen::Matrix<double, -1, 1>(sigma_v_1dim__);
      stan::math::fill(sigma_v, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      sigma_v = in__.vector(sigma_v_1dim__);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(sigma_v, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_v[(sym1__ - 1)], 0),
          "assigning variable sigma_v");}
      Eigen::Matrix<double, -1, 1> nu;
      nu = Eigen::Matrix<double, -1, 1>(nu_1dim__);
      stan::math::fill(nu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      nu = in__.vector(nu_1dim__);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(nu[(sym1__ - 1)], 0),
          "assigning variable nu");}
      Eigen::Matrix<double, -1, 1> psi_d;
      psi_d = Eigen::Matrix<double, -1, 1>(psi_d_1dim__);
      stan::math::fill(psi_d, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      psi_d = in__.vector(psi_d_1dim__);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
        current_statement__ = 9;
        assign(psi_d, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(psi_d[(sym1__ - 1)], 0),
          "assigning variable psi_d");}
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(lambda_1dim__);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      lambda = in__.vector(lambda_1dim__);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(lambda[(sym1__ - 1)], 0),
          "assigning variable lambda");}
      Eigen::Matrix<double, -1, 1> s_raw;
      s_raw = Eigen::Matrix<double, -1, 1>(s_raw_1dim__);
      stan::math::fill(s_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      s_raw = in__.vector(s_raw_1dim__);
      Eigen::Matrix<double, -1, 1> sigma_s;
      sigma_s = Eigen::Matrix<double, -1, 1>(sigma_s_1dim__);
      stan::math::fill(sigma_s, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      sigma_s = in__.vector(sigma_s_1dim__);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(sigma_s, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_s[(sym1__ - 1)], 0),
          "assigning variable sigma_s");}
      Eigen::Matrix<double, -1, -1> t_raw;
      t_raw = Eigen::Matrix<double, -1, -1>(t_raw_1dim__, t_raw_2dim__);
      stan::math::fill(t_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      t_raw = in__.matrix(t_raw_1dim__, t_raw_2dim__);
      Eigen::Matrix<double, -1, 1> sigma_t;
      sigma_t = Eigen::Matrix<double, -1, 1>(sigma_t_1dim__);
      stan::math::fill(sigma_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      sigma_t = in__.vector(sigma_t_1dim__);
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
        current_statement__ = 14;
        assign(sigma_t, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_t[(sym1__ - 1)], 0),
          "assigning variable sigma_t");}
      Eigen::Matrix<double, -1, 1> w;
      w = Eigen::Matrix<double, -1, 1>(w_1dim__);
      stan::math::fill(w, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      w = in__.vector(w_1dim__);
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
        current_statement__ = 15;
        assign(w, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(w[(sym1__ - 1)], 0.001, 0.999),
          "assigning variable w");}
      Eigen::Matrix<double, -1, 1> p;
      p = Eigen::Matrix<double, -1, 1>(p_1dim__);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      p = in__.vector(p_1dim__);
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
        current_statement__ = 16;
        assign(p, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(p[(sym1__ - 1)], 0.001, 0.999),
          "assigning variable p");}
      Eigen::Matrix<double, -1, 1> gamma_p0;
      gamma_p0 = Eigen::Matrix<double, -1, 1>(gamma_p0_1dim__);
      stan::math::fill(gamma_p0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      gamma_p0 = in__.vector(gamma_p0_1dim__);
      Eigen::Matrix<double, -1, 1> gamma_p1;
      gamma_p1 = Eigen::Matrix<double, -1, 1>(gamma_p1_1dim__);
      stan::math::fill(gamma_p1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      gamma_p1 = in__.vector(gamma_p1_1dim__);
      Eigen::Matrix<double, -1, 1> gamma0_p0;
      gamma0_p0 = Eigen::Matrix<double, -1, 1>(gamma0_p0_1dim__);
      stan::math::fill(gamma0_p0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      gamma0_p0 = in__.vector(gamma0_p0_1dim__);
      Eigen::Matrix<double, -1, 1> gamma0_p1;
      gamma0_p1 = Eigen::Matrix<double, -1, 1>(gamma0_p1_1dim__);
      stan::math::fill(gamma0_p1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      gamma0_p1 = in__.vector(gamma0_p1_1dim__);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(P);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> tau;
      tau = Eigen::Matrix<double, -1, 1>(tau_1dim__);
      stan::math::fill(tau, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> c2;
      c2 = Eigen::Matrix<double, -1, 1>(c2_1dim__);
      stan::math::fill(c2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> lambda_tilde;
      lambda_tilde = Eigen::Matrix<double, -1, 1>(lambda_tilde_1dim__);
      stan::math::fill(lambda_tilde, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> b1;
      b1 = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(b1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> a1;
      a1 = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(a1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(phi_1dim__);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> lambda1;
      lambda1 = Eigen::Matrix<double, -1, 1>(lambda1_1dim__);
      stan::math::fill(lambda1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> lambda2;
      lambda2 = Eigen::Matrix<double, -1, 1>(lambda2_1dim__);
      stan::math::fill(lambda2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> b2;
      b2 = Eigen::Matrix<double, -1, 1>(b2_1dim__);
      stan::math::fill(b2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> a2;
      a2 = Eigen::Matrix<double, -1, 1>(a2_1dim__);
      stan::math::fill(a2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> p0;
      p0 = Eigen::Matrix<double, -1, 1>(p0_1dim__);
      stan::math::fill(p0, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> p1;
      p1 = Eigen::Matrix<double, -1, 1>(p1_1dim__);
      stan::math::fill(p1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> v;
      v = Eigen::Matrix<double, -1, 1>(length_v);
      stan::math::fill(v, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> s;
      s = Eigen::Matrix<double, -1, 1>(s_1dim__);
      stan::math::fill(s, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> t;
      t = Eigen::Matrix<double, -1, -1>(t_1dim__, t_2dim__);
      stan::math::fill(t, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> reffs;
      reffs = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(reffs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> reffs_oos;
      reffs_oos = Eigen::Matrix<double, -1, 1>(M_oos);
      stan::math::fill(reffs_oos, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= beta0_1dim__; ++sym1__) {
        vars__.emplace_back(beta0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        vars__.emplace_back(z_beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
        vars__.emplace_back(lambda_HS[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
        vars__.emplace_back(z_c2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
        vars__.emplace_back(z_tau[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
        vars__.emplace_back(v_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_v[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
        vars__.emplace_back(nu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
        vars__.emplace_back(psi_d[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= s_raw_1dim__; ++sym1__) {
        vars__.emplace_back(s_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_s[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= t_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= t_raw_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(t_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "t_raw"));}}
      for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_t[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
        vars__.emplace_back(w[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
        vars__.emplace_back(p[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma_p0_1dim__; ++sym1__) {
        vars__.emplace_back(gamma_p0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma_p1_1dim__; ++sym1__) {
        vars__.emplace_back(gamma_p1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma0_p0_1dim__; ++sym1__) {
        vars__.emplace_back(gamma0_p0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma0_p1_1dim__; ++sym1__) {
        vars__.emplace_back(gamma0_p1[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 49;
      if (logical_eq(prior_coeff, 0)) {
        current_statement__ = 47;
        assign(beta, nil_index_list(), z_beta, "assigning variable beta");
      } else {
        current_statement__ = 46;
        if (logical_eq(prior_coeff, 1)) {
          current_statement__ = 41;
          assign(tau, cons_list(index_uni(1), nil_index_list()),
            (tau0 * z_tau[(1 - 1)]), "assigning variable tau");
          current_statement__ = 42;
          assign(c2, cons_list(index_uni(1), nil_index_list()),
            (slab_scale2 * z_c2[(1 - 1)]), "assigning variable c2");
          current_statement__ = 43;
          assign(lambda_tilde, nil_index_list(),
            stan::math::sqrt(
              elt_divide(multiply(c2[(1 - 1)], square(lambda_HS)),
                add(c2[(1 - 1)],
                  multiply(square(tau[(1 - 1)]), square(lambda_HS))))),
            "assigning variable lambda_tilde");
          current_statement__ = 44;
          assign(beta, nil_index_list(),
            elt_multiply(multiply(tau[(1 - 1)], lambda_tilde), z_beta),
            "assigning variable beta");
        } 
      }
      current_statement__ = 60;
      if (logical_eq(spatio_temporal, 0)) {
        current_statement__ = 58;
        if (logical_eq(prior_reff, 0)) {
          current_statement__ = 56;
          assign(v, nil_index_list(), multiply(sigma_v[(1 - 1)], v_raw),
            "assigning variable v");
        } else {
          current_statement__ = 55;
          if (logical_eq(prior_reff, 1)) {
            current_statement__ = 53;
            assign(v, nil_index_list(), multiply(sigma_v[(1 - 1)], v_raw),
              "assigning variable v");
          } else {
            current_statement__ = 52;
            if (logical_eq(prior_reff, 2)) {
              current_statement__ = 50;
              assign(v, nil_index_list(),
                elt_multiply(
                  multiply(stan::math::sqrt(psi_d), lambda[(1 - 1)]), v_raw),
                "assigning variable v");
            } 
          }
        }
      } 
      current_statement__ = 115;
      if ((primitive_value(logical_eq(spatial_err, 0)) && primitive_value(
          logical_eq(temporal_err, 0)))) {
        current_statement__ = 110;
        assign(reffs, nil_index_list(), v, "assigning variable reffs");
        current_statement__ = 113;
        for (int i = 1; i <= M_oos; ++i) {
          current_statement__ = 111;
          assign(reffs_oos, cons_list(index_uni(i), nil_index_list()), 0,
            "assigning variable reffs_oos");}
      } else {
        current_statement__ = 71;
        if ((primitive_value(logical_eq(spatial_err, 1)) && primitive_value(
            logical_eq(temporal_err, 0)))) {
          current_statement__ = 63;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 61;
            assign(s,
              cons_list(index_uni(indices_spat[(i - 1)]), nil_index_list()),
              ((sigma_s[(1 - 1)] * s_raw[(i - 1)]) / scales_ICAR[(i - 1)]),
              "assigning variable s");}
          current_statement__ = 66;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 64;
            assign(reffs, cons_list(index_uni(i), nil_index_list()),
              (v[(i - 1)] + s[(indices_is[(i - 1)] - 1)]),
              "assigning variable reffs");}
          current_statement__ = 69;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 67;
            assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
              s[(indices_oos[(i - 1)] - 1)], "assigning variable reffs_oos");
          }
        } 
        current_statement__ = 88;
        if ((primitive_value(logical_eq(spatial_err, 0)) && primitive_value(
            logical_eq(temporal_err, 1)))) {
          current_statement__ = 72;
          assign(t, nil_index_list(),
            divide(multiply(sigma_t[(1 - 1)], t_raw), scale_factor_RW1),
            "assigning variable t");
          current_statement__ = 75;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 73;
            assign(reffs, cons_list(index_uni(i), nil_index_list()),
              (v[(indices_temp[(indices_is[(i - 1)] - 1)][(1 - 1)] - 1)] +
                rvalue(t,
                  cons_list(
                    index_uni(indices_temp[(indices_is[(i - 1)] - 1)][
                    (1 - 1)]),
                    cons_list(
                      index_uni(indices_temp[(indices_is[(i - 1)] - 1)][
                      (2 - 1)]), nil_index_list())), "t")),
              "assigning variable reffs");}
          current_statement__ = 86;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 78;
            if (logical_eq(cat_ios[(i - 1)], 1)) {
              current_statement__ = 76;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()), 0,
                "assigning variable reffs_oos");
            } 
            current_statement__ = 81;
            if (logical_eq(cat_ios[(i - 1)], 2)) {
              current_statement__ = 79;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                v[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)],
                "assigning variable reffs_oos");
            } 
            current_statement__ = 84;
            if (logical_eq(cat_ios[(i - 1)], 3)) {
              current_statement__ = 82;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                (v[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)] +
                  rvalue(t,
                    cons_list(
                      index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                      (1 - 1)]),
                      cons_list(
                        index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                        (2 - 1)]), nil_index_list())), "t")),
                "assigning variable reffs_oos");
            } }
        } 
        current_statement__ = 108;
        if ((primitive_value(logical_eq(spatial_err, 1)) && primitive_value(
            logical_eq(temporal_err, 1)))) {
          current_statement__ = 89;
          assign(t, nil_index_list(),
            divide(multiply(sigma_t[(1 - 1)], t_raw), scale_factor_RW1),
            "assigning variable t");
          current_statement__ = 92;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 90;
            assign(s, cons_list(index_uni(i), nil_index_list()),
              ((sigma_s[(1 - 1)] * s_raw[(indices_spat[(i - 1)] - 1)]) /
                scales_ICAR[(indices_spat[(i - 1)] - 1)]),
              "assigning variable s");}
          current_statement__ = 95;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 93;
            assign(reffs, cons_list(index_uni(i), nil_index_list()),
              (s[(indices_temp[(indices_is[(i - 1)] - 1)][(1 - 1)] - 1)] +
                rvalue(t,
                  cons_list(
                    index_uni(indices_temp[(indices_is[(i - 1)] - 1)][
                    (1 - 1)]),
                    cons_list(
                      index_uni(indices_temp[(indices_is[(i - 1)] - 1)][
                      (2 - 1)]), nil_index_list())), "t")),
              "assigning variable reffs");}
          current_statement__ = 106;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 98;
            if (logical_eq(cat_ios[(i - 1)], 1)) {
              current_statement__ = 96;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                (s[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)] +
                  rvalue(t,
                    cons_list(
                      index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                      (1 - 1)]),
                      cons_list(
                        index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                        (2 - 1)]), nil_index_list())), "t")),
                "assigning variable reffs_oos");
            } 
            current_statement__ = 101;
            if (logical_eq(cat_ios[(i - 1)], 2)) {
              current_statement__ = 99;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                (s[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)] +
                  rvalue(t,
                    cons_list(
                      index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                      (1 - 1)]),
                      cons_list(
                        index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                        (2 - 1)]), nil_index_list())), "t")),
                "assigning variable reffs_oos");
            } 
            current_statement__ = 104;
            if (logical_eq(cat_ios[(i - 1)], 3)) {
              current_statement__ = 102;
              assign(reffs_oos, cons_list(index_uni(i), nil_index_list()),
                (s[(indices_temp[(indices_oos[(i - 1)] - 1)][(1 - 1)] - 1)] +
                  rvalue(t,
                    cons_list(
                      index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                      (1 - 1)]),
                      cons_list(
                        index_uni(indices_temp[(indices_oos[(i - 1)] - 1)][
                        (2 - 1)]), nil_index_list())), "t")),
                "assigning variable reffs_oos");
            } }
        } 
      }
      current_statement__ = 205;
      if (logical_eq(likelihood, 0)) {
        current_statement__ = 203;
        for (int i = 1; i <= M_is; ++i) {
          current_statement__ = 193;
          if (logical_eq(intercept, 0)) {
            current_statement__ = 191;
            assign(mu, cons_list(index_uni(i), nil_index_list()),
              inv_logit(
                (multiply(
                   rvalue(X,
                     cons_list(index_uni(i),
                       cons_list(index_omni(), nil_index_list())), "X"),
                   beta) + reffs[(i - 1)])), "assigning variable mu");
          } else {
            current_statement__ = 189;
            assign(mu, cons_list(index_uni(i), nil_index_list()),
              inv_logit(
                ((beta0[(1 - 1)] +
                   multiply(
                     rvalue(X,
                       cons_list(index_uni(i),
                         cons_list(index_omni(), nil_index_list())), "X"),
                     beta)) + reffs[(i - 1)])), "assigning variable mu");
          }
          current_statement__ = 194;
          assign(theta, cons_list(index_uni(i), nil_index_list()),
            mu[(i - 1)], "assigning variable theta");
          current_statement__ = 201;
          if (logical_eq(deff, 0)) {
            current_statement__ = 198;
            assign(b1, cons_list(index_uni(i), nil_index_list()),
              ((1 - mu[(i - 1)]) *
                (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) - 1)),
              "assigning variable b1");
            current_statement__ = 199;
            assign(a1, cons_list(index_uni(i), nil_index_list()),
              (mu[(i - 1)] *
                (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) - 1)),
              "assigning variable a1");
          } else {
            current_statement__ = 195;
            assign(b1, cons_list(index_uni(i), nil_index_list()),
              ((1 - mu[(i - 1)]) * disp[(i - 1)]), "assigning variable b1");
            current_statement__ = 196;
            assign(a1, cons_list(index_uni(i), nil_index_list()),
              (mu[(i - 1)] * disp[(i - 1)]), "assigning variable a1");
          }}
      } else {
        current_statement__ = 188;
        if (logical_eq(likelihood, 1)) {
          current_statement__ = 186;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 176;
            if (logical_eq(intercept, 0)) {
              current_statement__ = 174;
              assign(lambda2, cons_list(index_uni(i), nil_index_list()),
                inv_logit(
                  (multiply(
                     rvalue(X,
                       cons_list(index_uni(i),
                         cons_list(index_omni(), nil_index_list())), "X"),
                     beta) + reffs[(i - 1)])), "assigning variable lambda2");
            } else {
              current_statement__ = 172;
              assign(lambda2, cons_list(index_uni(i), nil_index_list()),
                inv_logit(
                  ((beta0[(1 - 1)] +
                     multiply(
                       rvalue(X,
                         cons_list(index_uni(i),
                           cons_list(index_omni(), nil_index_list())), "X"),
                       beta)) + reffs[(i - 1)])),
                "assigning variable lambda2");
            }
            current_statement__ = 177;
            assign(lambda1, cons_list(index_uni(i), nil_index_list()),
              (lambda2[(i - 1)] +
                (w[(1 - 1)] *
                  stan::math::fmin(((1 - lambda2[(i - 1)]) / p[(1 - 1)]),
                    stan::math::sqrt(
                      (disp[(i - 1)] / (p[(1 - 1)] * (1 - p[(1 - 1)]))))))),
              "assigning variable lambda1");
            current_statement__ = 178;
            assign(mu, cons_list(index_uni(i), nil_index_list()),
              ((p[(1 - 1)] * lambda1[(i - 1)]) +
                ((1 - p[(1 - 1)]) * lambda2[(i - 1)])),
              "assigning variable mu");
            current_statement__ = 179;
            assign(theta, cons_list(index_uni(i), nil_index_list()),
              mu[(i - 1)], "assigning variable theta");
            current_statement__ = 180;
            assign(phi, cons_list(index_uni(i), nil_index_list()),
              (((mu[(i - 1)] * (1 - mu[(i - 1)])) - disp[(i - 1)]) /
                (disp[(i - 1)] -
                  (((p[(1 - 1)] * (1 - p[(1 - 1)])) * pow(w[(1 - 1)], 2)) *
                    pow(
                      stan::math::fmin(((1 - lambda2[(i - 1)]) / p[(1 - 1)]),
                        stan::math::sqrt(
                          (disp[(i - 1)] / (p[(1 - 1)] * (1 - p[(1 - 1)]))))),
                      2)))), "assigning variable phi");
            current_statement__ = 181;
            assign(b1, cons_list(index_uni(i), nil_index_list()),
              ((1 - lambda2[(i - 1)]) * phi[(i - 1)]),
              "assigning variable b1");
            current_statement__ = 182;
            assign(a1, cons_list(index_uni(i), nil_index_list()),
              (lambda2[(i - 1)] * phi[(i - 1)]), "assigning variable a1");
            current_statement__ = 183;
            assign(b2, cons_list(index_uni(i), nil_index_list()),
              ((1 - lambda1[(i - 1)]) * phi[(i - 1)]),
              "assigning variable b2");
            current_statement__ = 184;
            assign(a2, cons_list(index_uni(i), nil_index_list()),
              (lambda1[(i - 1)] * phi[(i - 1)]), "assigning variable a2");}
        } else {
          current_statement__ = 171;
          if (logical_eq(likelihood, 2)) {
            current_statement__ = 169;
            for (int i = 1; i <= M_is; ++i) {
              current_statement__ = 137;
              if (logical_eq(intercept, 0)) {
                current_statement__ = 135;
                assign(mu, cons_list(index_uni(i), nil_index_list()),
                  inv_logit(
                    (multiply(
                       rvalue(X,
                         cons_list(index_uni(i),
                           cons_list(index_omni(), nil_index_list())), "X"),
                       beta) + reffs[(i - 1)])), "assigning variable mu");
              } else {
                current_statement__ = 133;
                assign(mu, cons_list(index_uni(i), nil_index_list()),
                  inv_logit(
                    ((beta0[(1 - 1)] +
                       multiply(
                         rvalue(X,
                           cons_list(index_uni(i),
                             cons_list(index_omni(), nil_index_list())), "X"),
                         beta)) + reffs[(i - 1)])), "assigning variable mu");
              }
              current_statement__ = 144;
              if (logical_neq(inflation, 1)) {
                current_statement__ = 142;
                if (logical_eq(intercept, 0)) {
                  current_statement__ = 140;
                  assign(p0, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      multiply(
                        rvalue(X,
                          cons_list(index_uni(i),
                            cons_list(index_omni(), nil_index_list())), "X"),
                        gamma_p0)), "assigning variable p0");
                } else {
                  current_statement__ = 138;
                  assign(p0, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      (gamma0_p0[(1 - 1)] +
                        multiply(
                          rvalue(X,
                            cons_list(index_uni(i),
                              cons_list(index_omni(), nil_index_list())),
                            "X"), gamma_p0))), "assigning variable p0");
                }
              } 
              current_statement__ = 151;
              if (logical_neq(inflation, 0)) {
                current_statement__ = 149;
                if (logical_eq(intercept, 0)) {
                  current_statement__ = 147;
                  assign(p1, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      multiply(
                        rvalue(X,
                          cons_list(index_uni(i),
                            cons_list(index_omni(), nil_index_list())), "X"),
                        gamma_p1)), "assigning variable p1");
                } else {
                  current_statement__ = 145;
                  assign(p1, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      (gamma0_p1[(1 - 1)] +
                        multiply(
                          rvalue(X,
                            cons_list(index_uni(i),
                              cons_list(index_omni(), nil_index_list())),
                            "X"), gamma_p1))), "assigning variable p1");
                }
              } 
              current_statement__ = 160;
              if (logical_eq(inflation, 0)) {
                current_statement__ = 158;
                assign(theta, cons_list(index_uni(i), nil_index_list()),
                  ((1 - p0[(i - 1)]) * mu[(i - 1)]),
                  "assigning variable theta");
              } else {
                current_statement__ = 157;
                if (logical_eq(inflation, 1)) {
                  current_statement__ = 155;
                  assign(theta, cons_list(index_uni(i), nil_index_list()),
                    (((1 - p1[(i - 1)]) * mu[(i - 1)]) + p1[(i - 1)]),
                    "assigning variable theta");
                } else {
                  current_statement__ = 154;
                  if (logical_eq(inflation, 2)) {
                    current_statement__ = 152;
                    assign(theta, cons_list(index_uni(i), nil_index_list()),
                      ((((1 - p0[(i - 1)]) - p1[(i - 1)]) * mu[(i - 1)]) +
                        p1[(i - 1)]), "assigning variable theta");
                  } 
                }
              }
              current_statement__ = 167;
              if (logical_eq(deff, 0)) {
                current_statement__ = 164;
                assign(b1, cons_list(index_uni(i), nil_index_list()),
                  ((1 - mu[(i - 1)]) *
                    (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) - 1)),
                  "assigning variable b1");
                current_statement__ = 165;
                assign(a1, cons_list(index_uni(i), nil_index_list()),
                  (mu[(i - 1)] *
                    (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) - 1)),
                  "assigning variable a1");
              } else {
                current_statement__ = 161;
                assign(b1, cons_list(index_uni(i), nil_index_list()),
                  ((1 - mu[(i - 1)]) * disp[(i - 1)]),
                  "assigning variable b1");
                current_statement__ = 162;
                assign(a1, cons_list(index_uni(i), nil_index_list()),
                  (mu[(i - 1)] * disp[(i - 1)]), "assigning variable a1");
              }}
          } else {
            current_statement__ = 132;
            if (logical_eq(likelihood, 3)) {
              current_statement__ = 130;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 120;
                if (logical_eq(intercept, 0)) {
                  current_statement__ = 118;
                  assign(mu, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      (multiply(
                         rvalue(X,
                           cons_list(index_uni(i),
                             cons_list(index_omni(), nil_index_list())), "X"),
                         beta) + reffs[(i - 1)])), "assigning variable mu");
                } else {
                  current_statement__ = 116;
                  assign(mu, cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      ((beta0[(1 - 1)] +
                         multiply(
                           rvalue(X,
                             cons_list(index_uni(i),
                               cons_list(index_omni(), nil_index_list())),
                             "X"), beta)) + reffs[(i - 1)])),
                    "assigning variable mu");
                }
                current_statement__ = 121;
                assign(theta, cons_list(index_uni(i), nil_index_list()),
                  (mu[(i - 1)] * (1 - pow((1 - mu[(i - 1)]), m_d[(i - 1)]))),
                  "assigning variable theta");
                current_statement__ = 128;
                if (logical_eq(deff, 0)) {
                  current_statement__ = 125;
                  assign(b1, cons_list(index_uni(i), nil_index_list()),
                    ((1 - mu[(i - 1)]) *
                      (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) -
                        1)), "assigning variable b1");
                  current_statement__ = 126;
                  assign(a1, cons_list(index_uni(i), nil_index_list()),
                    (mu[(i - 1)] *
                      (((mu[(i - 1)] * (1 - mu[(i - 1)])) / disp[(i - 1)]) -
                        1)), "assigning variable a1");
                } else {
                  current_statement__ = 122;
                  assign(b1, cons_list(index_uni(i), nil_index_list()),
                    ((1 - mu[(i - 1)]) * disp[(i - 1)]),
                    "assigning variable b1");
                  current_statement__ = 123;
                  assign(a1, cons_list(index_uni(i), nil_index_list()),
                    (mu[(i - 1)] * disp[(i - 1)]), "assigning variable a1");
                }}
            } 
          }
        }
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "tau[sym1__]", tau[(sym1__ - 1)],
                               0);}
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= c2_1dim__; ++sym1__) {
        current_statement__ = 23;
        current_statement__ = 23;
        check_greater_or_equal(function__, "c2[sym1__]", c2[(sym1__ - 1)], 0);
      }
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= lambda_tilde_1dim__; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "lambda_tilde[sym1__]",
                               lambda_tilde[(sym1__ - 1)], 0);}
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 25;
        current_statement__ = 25;
        check_greater_or_equal(function__, "theta[sym1__]",
                               theta[(sym1__ - 1)], 0);}
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 25;
        current_statement__ = 25;
        check_less_or_equal(function__, "theta[sym1__]", theta[(sym1__ - 1)],
                            1);}
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_greater_or_equal(function__, "b1[sym1__]", b1[(sym1__ - 1)], 0);
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "a1[sym1__]", a1[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_greater_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_less_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], 1);}
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_greater_or_equal(function__, "phi[sym1__]", phi[(sym1__ - 1)],
                               0);}
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
        current_statement__ = 30;
        current_statement__ = 30;
        check_greater_or_equal(function__, "lambda1[sym1__]",
                               lambda1[(sym1__ - 1)], 0);}
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
        current_statement__ = 30;
        current_statement__ = 30;
        check_less_or_equal(function__, "lambda1[sym1__]",
                            lambda1[(sym1__ - 1)], 1);}
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 31;
        current_statement__ = 31;
        check_greater_or_equal(function__, "lambda2[sym1__]",
                               lambda2[(sym1__ - 1)], 0);}
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 31;
        current_statement__ = 31;
        check_less_or_equal(function__, "lambda2[sym1__]",
                            lambda2[(sym1__ - 1)], 1);}
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= b2_1dim__; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "b2[sym1__]", b2[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_greater_or_equal(function__, "a2[sym1__]", a2[(sym1__ - 1)], 0);
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_greater_or_equal(function__, "p0[sym1__]", p0[(sym1__ - 1)], 0);
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_less_or_equal(function__, "p0[sym1__]", p0[(sym1__ - 1)], 1);}
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_greater_or_equal(function__, "p1[sym1__]", p1[(sym1__ - 1)], 0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_less_or_equal(function__, "p1[sym1__]", p1[(sym1__ - 1)], 1);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          vars__.emplace_back(beta[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
          vars__.emplace_back(tau[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= c2_1dim__; ++sym1__) {
          vars__.emplace_back(c2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= lambda_tilde_1dim__; ++sym1__) {
          vars__.emplace_back(lambda_tilde[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          vars__.emplace_back(b1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          vars__.emplace_back(a1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          vars__.emplace_back(mu[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
          vars__.emplace_back(phi[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
          vars__.emplace_back(lambda1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
          vars__.emplace_back(lambda2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= b2_1dim__; ++sym1__) {
          vars__.emplace_back(b2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
          vars__.emplace_back(a2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
          vars__.emplace_back(p0[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
          vars__.emplace_back(p1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
          vars__.emplace_back(v[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
          vars__.emplace_back(s[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= t_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= t_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(t,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "t"));}}
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          vars__.emplace_back(reffs[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M_oos; ++sym1__) {
          vars__.emplace_back(reffs_oos[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_rep;
      y_rep = Eigen::Matrix<double, -1, 1>(M_is);
      stan::math::fill(y_rep, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> psi_OOS;
      psi_OOS = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> v_oos;
      v_oos = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      
      int label_mixt;
      label_mixt = std::numeric_limits<int>::min();
      
      Eigen::Matrix<double, -1, 1> probs;
      probs = Eigen::Matrix<double, -1, 1>(probs_1dim__);
      stan::math::fill(probs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta_oos;
      theta_oos = Eigen::Matrix<double, -1, 1>(theta_oos_1dim__);
      stan::math::fill(theta_oos, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 377;
      if (logical_eq(likelihood, 0)) {
        current_statement__ = 354;
        for (int i = 1; i <= M_is; ++i) {
          current_statement__ = 351;
          assign(log_lik, cons_list(index_uni(i), nil_index_list()),
            beta_lpdf<false>(y[(i - 1)], a1[(i - 1)], b1[(i - 1)]),
            "assigning variable log_lik");
          current_statement__ = 352;
          assign(y_rep, cons_list(index_uni(i), nil_index_list()),
            beta_rng(a1[(i - 1)], b1[(i - 1)], base_rng__),
            "assigning variable y_rep");}
        current_statement__ = 375;
        for (int i = 1; i <= M_oos; ++i) {
          current_statement__ = 368;
          if (logical_eq(temporal_err, 0)) {
            current_statement__ = 366;
            if (logical_eq(prior_reff, 0)) {
              current_statement__ = 364;
              assign(v_oos, cons_list(index_uni(1), nil_index_list()),
                normal_rng(0, sigma_v[(1 - 1)], base_rng__),
                "assigning variable v_oos");
            } else {
              current_statement__ = 363;
              if (logical_eq(prior_reff, 1)) {
                current_statement__ = 361;
                assign(v_oos, cons_list(index_uni(1), nil_index_list()),
                  student_t_rng(nu[(1 - 1)], 0, sigma_v[(1 - 1)], base_rng__),
                  "assigning variable v_oos");
              } else {
                current_statement__ = 360;
                if (logical_eq(prior_reff, 2)) {
                  current_statement__ = 357;
                  assign(psi_OOS, cons_list(index_uni(1), nil_index_list()),
                    gamma_rng(0.5, 1, base_rng__),
                    "assigning variable psi_OOS");
                  current_statement__ = 358;
                  assign(v_oos, cons_list(index_uni(1), nil_index_list()),
                    normal_rng(0,
                      (stan::math::sqrt(psi_OOS[(1 - 1)]) * lambda[(1 - 1)]),
                      base_rng__), "assigning variable v_oos");
                } 
              }
            }
          } else {
            current_statement__ = 355;
            assign(v_oos, cons_list(index_uni(1), nil_index_list()), 0,
              "assigning variable v_oos");
          }
          current_statement__ = 373;
          if (logical_eq(intercept, 0)) {
            current_statement__ = 371;
            assign(theta_oos, cons_list(index_uni(i), nil_index_list()),
              inv_logit(
                ((multiply(
                    rvalue(X_oos,
                      cons_list(index_uni(i),
                        cons_list(index_omni(), nil_index_list())), "X_oos"),
                    beta) + reffs_oos[(i - 1)]) + v_oos[(1 - 1)])),
              "assigning variable theta_oos");
          } else {
            current_statement__ = 369;
            assign(theta_oos, cons_list(index_uni(i), nil_index_list()),
              inv_logit(
                (((beta0[(1 - 1)] +
                    multiply(
                      rvalue(X_oos,
                        cons_list(index_uni(i),
                          cons_list(index_omni(), nil_index_list())),
                        "X_oos"), beta)) + reffs_oos[(i - 1)]) +
                  v_oos[(1 - 1)])), "assigning variable theta_oos");
          }}
      } else {
        current_statement__ = 350;
        if (logical_eq(likelihood, 1)) {
          current_statement__ = 348;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 340;
            assign(log_lik, cons_list(index_uni(i), nil_index_list()),
              log_mix(p[(1 - 1)],
                beta_lpdf<false>(y[(i - 1)], a2[(i - 1)], b2[(i - 1)]),
                beta_lpdf<false>(y[(i - 1)], a1[(i - 1)], b1[(i - 1)])),
              "assigning variable log_lik");
            current_statement__ = 341;
            label_mixt = bernoulli_rng(p[(1 - 1)], base_rng__);
            current_statement__ = 346;
            if (logical_eq(label_mixt, 1)) {
              current_statement__ = 344;
              assign(y_rep, cons_list(index_uni(i), nil_index_list()),
                beta_rng(a2[(i - 1)], b2[(i - 1)], base_rng__),
                "assigning variable y_rep");
            } else {
              current_statement__ = 342;
              assign(y_rep, cons_list(index_uni(i), nil_index_list()),
                beta_rng(a1[(i - 1)], b1[(i - 1)], base_rng__),
                "assigning variable y_rep");
            }}
        } else {
          current_statement__ = 339;
          if (logical_eq(likelihood, 2)) {
            current_statement__ = 288;
            for (int i = 1; i <= M_oos; ++i) {
              current_statement__ = 265;
              if (logical_eq(temporal_err, 0)) {
                current_statement__ = 263;
                if (logical_eq(prior_reff, 0)) {
                  current_statement__ = 261;
                  assign(v_oos, cons_list(index_uni(1), nil_index_list()),
                    normal_rng(0, sigma_v[(1 - 1)], base_rng__),
                    "assigning variable v_oos");
                } else {
                  current_statement__ = 260;
                  if (logical_eq(prior_reff, 1)) {
                    current_statement__ = 258;
                    assign(v_oos, cons_list(index_uni(1), nil_index_list()),
                      student_t_rng(nu[(1 - 1)], 0, sigma_v[(1 - 1)],
                        base_rng__), "assigning variable v_oos");
                  } else {
                    current_statement__ = 257;
                    if (logical_eq(prior_reff, 2)) {
                      current_statement__ = 254;
                      assign(psi_OOS,
                        cons_list(index_uni(1), nil_index_list()),
                        gamma_rng(0.5, 1, base_rng__),
                        "assigning variable psi_OOS");
                      current_statement__ = 255;
                      assign(v_oos,
                        cons_list(index_uni(1), nil_index_list()),
                        normal_rng(0,
                          (stan::math::sqrt(psi_OOS[(1 - 1)]) *
                            lambda[(1 - 1)]), base_rng__),
                        "assigning variable v_oos");
                    } 
                  }
                }
              } else {
                current_statement__ = 252;
                assign(v_oos, cons_list(index_uni(1), nil_index_list()), 0,
                  "assigning variable v_oos");
              }
              current_statement__ = 286;
              if (logical_eq(inflation, 0)) {
                current_statement__ = 284;
                if (logical_eq(intercept, 0)) {
                  current_statement__ = 282;
                  assign(theta_oos,
                    cons_list(index_uni(i), nil_index_list()),
                    ((1 -
                       inv_logit(
                         multiply(
                           rvalue(X_oos,
                             cons_list(index_uni(i),
                               cons_list(index_omni(), nil_index_list())),
                             "X_oos"), gamma_p0))) *
                      inv_logit(
                        ((multiply(
                            rvalue(X_oos,
                              cons_list(index_uni(i),
                                cons_list(index_omni(), nil_index_list())),
                              "X_oos"), beta) + reffs_oos[(i - 1)]) +
                          v_oos[(1 - 1)]))), "assigning variable theta_oos");
                } else {
                  current_statement__ = 280;
                  assign(theta_oos,
                    cons_list(index_uni(i), nil_index_list()),
                    ((1 -
                       inv_logit(
                         (gamma0_p0[(1 - 1)] +
                           multiply(
                             rvalue(X_oos,
                               cons_list(index_uni(i),
                                 cons_list(index_omni(), nil_index_list())),
                               "X_oos"), gamma_p0)))) *
                      inv_logit(
                        (((beta0[(1 - 1)] +
                            multiply(
                              rvalue(X_oos,
                                cons_list(index_uni(i),
                                  cons_list(index_omni(), nil_index_list())),
                                "X_oos"), beta)) + reffs_oos[(i - 1)]) +
                          v_oos[(1 - 1)]))), "assigning variable theta_oos");
                }
              } else {
                current_statement__ = 279;
                if (logical_eq(inflation, 1)) {
                  current_statement__ = 277;
                  if (logical_eq(intercept, 0)) {
                    current_statement__ = 275;
                    assign(theta_oos,
                      cons_list(index_uni(i), nil_index_list()),
                      (((1 -
                          inv_logit(
                            multiply(
                              rvalue(X_oos,
                                cons_list(index_uni(i),
                                  cons_list(index_omni(), nil_index_list())),
                                "X_oos"), gamma_p1))) *
                         inv_logit(
                           ((multiply(
                               rvalue(X_oos,
                                 cons_list(index_uni(i),
                                   cons_list(index_omni(), nil_index_list())),
                                 "X_oos"), beta) + reffs_oos[(i - 1)]) +
                             v_oos[(1 - 1)]))) +
                        inv_logit(
                          multiply(
                            rvalue(X_oos,
                              cons_list(index_uni(i),
                                cons_list(index_omni(), nil_index_list())),
                              "X_oos"), gamma_p1))),
                      "assigning variable theta_oos");
                  } else {
                    current_statement__ = 273;
                    assign(theta_oos,
                      cons_list(index_uni(i), nil_index_list()),
                      (((1 -
                          inv_logit(
                            (gamma0_p1[(1 - 1)] +
                              multiply(
                                rvalue(X_oos,
                                  cons_list(index_uni(i),
                                    cons_list(index_omni(), nil_index_list())),
                                  "X_oos"), gamma_p1)))) *
                         inv_logit(
                           (((beta0[(1 - 1)] +
                               multiply(
                                 rvalue(X_oos,
                                   cons_list(index_uni(i),
                                     cons_list(index_omni(),
                                       nil_index_list())), "X_oos"), beta)) +
                              reffs_oos[(i - 1)]) + v_oos[(1 - 1)]))) +
                        inv_logit(
                          (gamma0_p1[(1 - 1)] +
                            multiply(
                              rvalue(X_oos,
                                cons_list(index_uni(i),
                                  cons_list(index_omni(), nil_index_list())),
                                "X_oos"), gamma_p1)))),
                      "assigning variable theta_oos");
                  }
                } else {
                  current_statement__ = 272;
                  if (logical_eq(inflation, 2)) {
                    current_statement__ = 270;
                    if (logical_eq(intercept, 0)) {
                      current_statement__ = 268;
                      assign(theta_oos,
                        cons_list(index_uni(i), nil_index_list()),
                        ((((1 -
                             inv_logit(
                               multiply(
                                 rvalue(X_oos,
                                   cons_list(index_uni(i),
                                     cons_list(index_omni(),
                                       nil_index_list())), "X_oos"),
                                 gamma_p0))) -
                            inv_logit(
                              multiply(
                                rvalue(X_oos,
                                  cons_list(index_uni(i),
                                    cons_list(index_omni(), nil_index_list())),
                                  "X_oos"), gamma_p1))) *
                           inv_logit(
                             ((multiply(
                                 rvalue(X_oos,
                                   cons_list(index_uni(i),
                                     cons_list(index_omni(),
                                       nil_index_list())), "X_oos"), beta) +
                                reffs_oos[(i - 1)]) + v_oos[(1 - 1)]))) +
                          inv_logit(
                            multiply(
                              rvalue(X_oos,
                                cons_list(index_uni(i),
                                  cons_list(index_omni(), nil_index_list())),
                                "X_oos"), gamma_p1))),
                        "assigning variable theta_oos");
                    } else {
                      current_statement__ = 266;
                      assign(theta_oos,
                        cons_list(index_uni(i), nil_index_list()),
                        ((((1 -
                             inv_logit(
                               (gamma0_p0[(1 - 1)] +
                                 multiply(
                                   rvalue(X_oos,
                                     cons_list(index_uni(i),
                                       cons_list(index_omni(),
                                         nil_index_list())), "X_oos"),
                                   gamma_p0)))) -
                            inv_logit(
                              (gamma0_p1[(1 - 1)] +
                                multiply(
                                  rvalue(X_oos,
                                    cons_list(index_uni(i),
                                      cons_list(index_omni(),
                                        nil_index_list())), "X_oos"),
                                  gamma_p1)))) *
                           inv_logit(
                             (((beta0[(1 - 1)] +
                                 multiply(
                                   rvalue(X_oos,
                                     cons_list(index_uni(i),
                                       cons_list(index_omni(),
                                         nil_index_list())), "X_oos"), beta))
                                + reffs_oos[(i - 1)]) + v_oos[(1 - 1)]))) +
                          inv_logit(
                            (gamma0_p1[(1 - 1)] +
                              multiply(
                                rvalue(X_oos,
                                  cons_list(index_uni(i),
                                    cons_list(index_omni(), nil_index_list())),
                                  "X_oos"), gamma_p1)))),
                        "assigning variable theta_oos");
                    }
                  } 
                }
              }}
            current_statement__ = 337;
            for (int i = 1; i <= M_is; ++i) {
              current_statement__ = 304;
              if ((primitive_value(logical_eq(y[(i - 1)], 0)) &&
                  primitive_value(logical_neq(inflation, 1)))) {
                current_statement__ = 302;
                assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                  stan::math::log(p0[(i - 1)]), "assigning variable log_lik");
              } else {
                current_statement__ = 301;
                if ((primitive_value(logical_eq(y[(i - 1)], 1)) &&
                    primitive_value(logical_neq(inflation, 0)))) {
                  current_statement__ = 299;
                  assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                    stan::math::log(p1[(i - 1)]),
                    "assigning variable log_lik");
                } else {
                  current_statement__ = 297;
                  if (logical_eq(inflation, 0)) {
                    current_statement__ = 295;
                    assign(log_lik,
                      cons_list(index_uni(i), nil_index_list()),
                      (stan::math::log((1 - p0[(i - 1)])) +
                        beta_lpdf<false>(y[(i - 1)], a1[(i - 1)],
                          b1[(i - 1)])), "assigning variable log_lik");
                  } else {
                    current_statement__ = 294;
                    if (logical_eq(inflation, 1)) {
                      current_statement__ = 292;
                      assign(log_lik,
                        cons_list(index_uni(i), nil_index_list()),
                        (stan::math::log((1 - p1[(i - 1)])) +
                          beta_lpdf<false>(y[(i - 1)], a1[(i - 1)],
                            b1[(i - 1)])), "assigning variable log_lik");
                    } else {
                      current_statement__ = 291;
                      if (logical_eq(inflation, 2)) {
                        current_statement__ = 289;
                        assign(log_lik,
                          cons_list(index_uni(i), nil_index_list()),
                          (stan::math::log(((1 - p0[(i - 1)]) - p1[(i - 1)]))
                            +
                            beta_lpdf<false>(y[(i - 1)], a1[(i - 1)],
                              b1[(i - 1)])), "assigning variable log_lik");
                      } 
                    }
                  }
                }
              }
              current_statement__ = 335;
              if (logical_eq(inflation, 0)) {
                current_statement__ = 328;
                label_mixt = bernoulli_rng(p0[(i - 1)], base_rng__);
                current_statement__ = 333;
                if (logical_eq(label_mixt, 1)) {
                  current_statement__ = 331;
                  assign(y_rep, cons_list(index_uni(i), nil_index_list()), 0,
                    "assigning variable y_rep");
                } else {
                  current_statement__ = 329;
                  assign(y_rep, cons_list(index_uni(i), nil_index_list()),
                    beta_rng(a1[(i - 1)], b1[(i - 1)], base_rng__),
                    "assigning variable y_rep");
                }
              } else {
                current_statement__ = 327;
                if (logical_eq(inflation, 1)) {
                  current_statement__ = 320;
                  label_mixt = bernoulli_rng(p1[(i - 1)], base_rng__);
                  current_statement__ = 325;
                  if (logical_eq(label_mixt, 1)) {
                    current_statement__ = 323;
                    assign(y_rep, cons_list(index_uni(i), nil_index_list()),
                      1, "assigning variable y_rep");
                  } else {
                    current_statement__ = 321;
                    assign(y_rep, cons_list(index_uni(i), nil_index_list()),
                      beta_rng(a1[(i - 1)], b1[(i - 1)], base_rng__),
                      "assigning variable y_rep");
                  }
                } else {
                  current_statement__ = 319;
                  if (logical_eq(inflation, 2)) {
                    current_statement__ = 305;
                    assign(probs, cons_list(index_uni(1), nil_index_list()),
                      p0[(i - 1)], "assigning variable probs");
                    current_statement__ = 306;
                    assign(probs, cons_list(index_uni(2), nil_index_list()),
                      ((1 - p0[(i - 1)]) - p1[(i - 1)]),
                      "assigning variable probs");
                    current_statement__ = 307;
                    assign(probs, cons_list(index_uni(3), nil_index_list()),
                      p1[(i - 1)], "assigning variable probs");
                    current_statement__ = 308;
                    label_mixt = categorical_rng(probs, base_rng__);
                    current_statement__ = 317;
                    if (logical_eq(label_mixt, 1)) {
                      current_statement__ = 315;
                      assign(y_rep,
                        cons_list(index_uni(i), nil_index_list()), 0,
                        "assigning variable y_rep");
                    } else {
                      current_statement__ = 314;
                      if (logical_eq(label_mixt, 2)) {
                        current_statement__ = 312;
                        assign(y_rep,
                          cons_list(index_uni(i), nil_index_list()),
                          beta_rng(a1[(i - 1)], b1[(i - 1)], base_rng__),
                          "assigning variable y_rep");
                      } else {
                        current_statement__ = 311;
                        if (logical_eq(label_mixt, 3)) {
                          current_statement__ = 309;
                          assign(y_rep,
                            cons_list(index_uni(i), nil_index_list()), 1,
                            "assigning variable y_rep");
                        } 
                      }
                    }
                  } 
                }
              }}
          } else {
            current_statement__ = 251;
            if (logical_eq(likelihood, 3)) {
              current_statement__ = 233;
              for (int i = 1; i <= M_oos; ++i) {
                current_statement__ = 226;
                if (logical_eq(temporal_err, 0)) {
                  current_statement__ = 224;
                  if (logical_eq(prior_reff, 0)) {
                    current_statement__ = 222;
                    assign(v_oos, cons_list(index_uni(1), nil_index_list()),
                      normal_rng(0, sigma_v[(1 - 1)], base_rng__),
                      "assigning variable v_oos");
                  } else {
                    current_statement__ = 221;
                    if (logical_eq(prior_reff, 1)) {
                      current_statement__ = 219;
                      assign(v_oos,
                        cons_list(index_uni(1), nil_index_list()),
                        student_t_rng(nu[(1 - 1)], 0, sigma_v[(1 - 1)],
                          base_rng__), "assigning variable v_oos");
                    } else {
                      current_statement__ = 218;
                      if (logical_eq(prior_reff, 2)) {
                        current_statement__ = 215;
                        assign(psi_OOS,
                          cons_list(index_uni(1), nil_index_list()),
                          gamma_rng(0.5, 1, base_rng__),
                          "assigning variable psi_OOS");
                        current_statement__ = 216;
                        assign(v_oos,
                          cons_list(index_uni(1), nil_index_list()),
                          normal_rng(0,
                            (stan::math::sqrt(psi_OOS[(1 - 1)]) *
                              lambda[(1 - 1)]), base_rng__),
                          "assigning variable v_oos");
                      } 
                    }
                  }
                } else {
                  current_statement__ = 213;
                  assign(v_oos, cons_list(index_uni(1), nil_index_list()), 0,
                    "assigning variable v_oos");
                }
                current_statement__ = 231;
                if (logical_eq(intercept, 0)) {
                  current_statement__ = 229;
                  assign(theta_oos,
                    cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      ((multiply(
                          rvalue(X_oos,
                            cons_list(index_uni(i),
                              cons_list(index_omni(), nil_index_list())),
                            "X_oos"), beta) + reffs_oos[(i - 1)]) +
                        v_oos[(1 - 1)])), "assigning variable theta_oos");
                } else {
                  current_statement__ = 227;
                  assign(theta_oos,
                    cons_list(index_uni(i), nil_index_list()),
                    inv_logit(
                      (((beta0[(1 - 1)] +
                          multiply(
                            rvalue(X_oos,
                              cons_list(index_uni(i),
                                cons_list(index_omni(), nil_index_list())),
                              "X_oos"), beta)) + reffs_oos[(i - 1)]) +
                        v_oos[(1 - 1)])), "assigning variable theta_oos");
                }}
              current_statement__ = 241;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 238;
                if (logical_eq(y[(i - 1)], 0)) {
                  current_statement__ = 236;
                  assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                    (m_d[(i - 1)] * stan::math::log((1 - mu[(i - 1)]))),
                    "assigning variable log_lik");
                } else {
                  current_statement__ = 234;
                  assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                    (stan::math::log(
                       (1 - pow((1 - mu[(i - 1)]), m_d[(i - 1)]))) +
                      beta_lpdf<false>(y[(i - 1)], a1[(i - 1)], b1[(i - 1)])),
                    "assigning variable log_lik");
                }
                current_statement__ = 239;
                assign(y_rep, cons_list(index_uni(i), nil_index_list()),
                  beta_rng(a1[(i - 1)], b1[(i - 1)], base_rng__),
                  "assigning variable y_rep");}
              current_statement__ = 249;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 242;
                label_mixt = bernoulli_rng(
                               pow((1 - mu[(i - 1)]), m_d[(i - 1)]),
                               base_rng__);
                current_statement__ = 247;
                if (logical_eq(label_mixt, 1)) {
                  current_statement__ = 245;
                  assign(y_rep, cons_list(index_uni(i), nil_index_list()),
                    0.0, "assigning variable y_rep");
                } else {
                  current_statement__ = 243;
                  assign(y_rep, cons_list(index_uni(i), nil_index_list()),
                    beta_rng(a1[(i - 1)], b1[(i - 1)], base_rng__),
                    "assigning variable y_rep");
                }}
            } 
          }
        }
      }
      current_statement__ = 212;
      for (int sym1__ = 1; sym1__ <= theta_oos_1dim__; ++sym1__) {
        current_statement__ = 212;
        current_statement__ = 212;
        check_greater_or_equal(function__, "theta_oos[sym1__]",
                               theta_oos[(sym1__ - 1)], 0);}
      current_statement__ = 212;
      for (int sym1__ = 1; sym1__ <= theta_oos_1dim__; ++sym1__) {
        current_statement__ = 212;
        current_statement__ = 212;
        check_less_or_equal(function__, "theta_oos[sym1__]",
                            theta_oos[(sym1__ - 1)], 1);}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        vars__.emplace_back(log_lik[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        vars__.emplace_back(y_rep[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        vars__.emplace_back(psi_OOS[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        vars__.emplace_back(v_oos[(sym1__ - 1)]);}
      vars__.emplace_back(label_mixt);
      for (int sym1__ = 1; sym1__ <= probs_1dim__; ++sym1__) {
        vars__.emplace_back(probs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= theta_oos_1dim__; ++sym1__) {
        vars__.emplace_back(theta_oos[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> beta0;
      beta0 = Eigen::Matrix<double, -1, 1>(beta0_1dim__);
      stan::math::fill(beta0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta0_flat__;
        current_statement__ = 1;
        assign(beta0_flat__, nil_index_list(), context__.vals_r("beta0"),
          "assigning variable beta0_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= beta0_1dim__; ++sym1__) {
          current_statement__ = 1;
          assign(beta0, cons_list(index_uni(sym1__), nil_index_list()),
            beta0_flat__[(pos__ - 1)], "assigning variable beta0");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_beta;
      z_beta = Eigen::Matrix<double, -1, 1>(P);
      stan::math::fill(z_beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_beta_flat__;
        current_statement__ = 2;
        assign(z_beta_flat__, nil_index_list(), context__.vals_r("z_beta"),
          "assigning variable z_beta_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 2;
          assign(z_beta, cons_list(index_uni(sym1__), nil_index_list()),
            z_beta_flat__[(pos__ - 1)], "assigning variable z_beta");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda_HS;
      lambda_HS = Eigen::Matrix<double, -1, 1>(lambda_HS_1dim__);
      stan::math::fill(lambda_HS, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_HS_flat__;
        current_statement__ = 3;
        assign(lambda_HS_flat__, nil_index_list(),
          context__.vals_r("lambda_HS"),
          "assigning variable lambda_HS_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(lambda_HS, cons_list(index_uni(sym1__), nil_index_list()),
            lambda_HS_flat__[(pos__ - 1)], "assigning variable lambda_HS");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda_HS_free__;
      lambda_HS_free__ = Eigen::Matrix<double, -1, 1>(lambda_HS_1dim__);
      stan::math::fill(lambda_HS_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(lambda_HS_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(lambda_HS[(sym1__ - 1)], 0),
          "assigning variable lambda_HS_free__");}
      Eigen::Matrix<double, -1, 1> z_c2;
      z_c2 = Eigen::Matrix<double, -1, 1>(z_c2_1dim__);
      stan::math::fill(z_c2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_c2_flat__;
        current_statement__ = 4;
        assign(z_c2_flat__, nil_index_list(), context__.vals_r("z_c2"),
          "assigning variable z_c2_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
          current_statement__ = 4;
          assign(z_c2, cons_list(index_uni(sym1__), nil_index_list()),
            z_c2_flat__[(pos__ - 1)], "assigning variable z_c2");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_c2_free__;
      z_c2_free__ = Eigen::Matrix<double, -1, 1>(z_c2_1dim__);
      stan::math::fill(z_c2_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(z_c2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(z_c2[(sym1__ - 1)], 0),
          "assigning variable z_c2_free__");}
      Eigen::Matrix<double, -1, 1> z_tau;
      z_tau = Eigen::Matrix<double, -1, 1>(z_tau_1dim__);
      stan::math::fill(z_tau, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_tau_flat__;
        current_statement__ = 5;
        assign(z_tau_flat__, nil_index_list(), context__.vals_r("z_tau"),
          "assigning variable z_tau_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
          current_statement__ = 5;
          assign(z_tau, cons_list(index_uni(sym1__), nil_index_list()),
            z_tau_flat__[(pos__ - 1)], "assigning variable z_tau");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_tau_free__;
      z_tau_free__ = Eigen::Matrix<double, -1, 1>(z_tau_1dim__);
      stan::math::fill(z_tau_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(z_tau_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(z_tau[(sym1__ - 1)], 0),
          "assigning variable z_tau_free__");}
      Eigen::Matrix<double, -1, 1> v_raw;
      v_raw = Eigen::Matrix<double, -1, 1>(length_v);
      stan::math::fill(v_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> v_raw_flat__;
        current_statement__ = 6;
        assign(v_raw_flat__, nil_index_list(), context__.vals_r("v_raw"),
          "assigning variable v_raw_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
          current_statement__ = 6;
          assign(v_raw, cons_list(index_uni(sym1__), nil_index_list()),
            v_raw_flat__[(pos__ - 1)], "assigning variable v_raw");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_v;
      sigma_v = Eigen::Matrix<double, -1, 1>(sigma_v_1dim__);
      stan::math::fill(sigma_v, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_v_flat__;
        current_statement__ = 7;
        assign(sigma_v_flat__, nil_index_list(), context__.vals_r("sigma_v"),
          "assigning variable sigma_v_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
          current_statement__ = 7;
          assign(sigma_v, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_v_flat__[(pos__ - 1)], "assigning variable sigma_v");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_v_free__;
      sigma_v_free__ = Eigen::Matrix<double, -1, 1>(sigma_v_1dim__);
      stan::math::fill(sigma_v_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(sigma_v_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_v[(sym1__ - 1)], 0),
          "assigning variable sigma_v_free__");}
      Eigen::Matrix<double, -1, 1> nu;
      nu = Eigen::Matrix<double, -1, 1>(nu_1dim__);
      stan::math::fill(nu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nu_flat__;
        current_statement__ = 8;
        assign(nu_flat__, nil_index_list(), context__.vals_r("nu"),
          "assigning variable nu_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
          current_statement__ = 8;
          assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
            nu_flat__[(pos__ - 1)], "assigning variable nu");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> nu_free__;
      nu_free__ = Eigen::Matrix<double, -1, 1>(nu_1dim__);
      stan::math::fill(nu_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(nu_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(nu[(sym1__ - 1)], 0),
          "assigning variable nu_free__");}
      Eigen::Matrix<double, -1, 1> psi_d;
      psi_d = Eigen::Matrix<double, -1, 1>(psi_d_1dim__);
      stan::math::fill(psi_d, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_d_flat__;
        current_statement__ = 9;
        assign(psi_d_flat__, nil_index_list(), context__.vals_r("psi_d"),
          "assigning variable psi_d_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
          current_statement__ = 9;
          assign(psi_d, cons_list(index_uni(sym1__), nil_index_list()),
            psi_d_flat__[(pos__ - 1)], "assigning variable psi_d");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> psi_d_free__;
      psi_d_free__ = Eigen::Matrix<double, -1, 1>(psi_d_1dim__);
      stan::math::fill(psi_d_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
        current_statement__ = 9;
        assign(psi_d_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(psi_d[(sym1__ - 1)], 0),
          "assigning variable psi_d_free__");}
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(lambda_1dim__);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 10;
        assign(lambda_flat__, nil_index_list(), context__.vals_r("lambda"),
          "assigning variable lambda_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
          current_statement__ = 10;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            lambda_flat__[(pos__ - 1)], "assigning variable lambda");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda_free__;
      lambda_free__ = Eigen::Matrix<double, -1, 1>(lambda_1dim__);
      stan::math::fill(lambda_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(lambda_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(lambda[(sym1__ - 1)], 0),
          "assigning variable lambda_free__");}
      Eigen::Matrix<double, -1, 1> s_raw;
      s_raw = Eigen::Matrix<double, -1, 1>(s_raw_1dim__);
      stan::math::fill(s_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s_raw_flat__;
        current_statement__ = 11;
        assign(s_raw_flat__, nil_index_list(), context__.vals_r("s_raw"),
          "assigning variable s_raw_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= s_raw_1dim__; ++sym1__) {
          current_statement__ = 11;
          assign(s_raw, cons_list(index_uni(sym1__), nil_index_list()),
            s_raw_flat__[(pos__ - 1)], "assigning variable s_raw");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_s;
      sigma_s = Eigen::Matrix<double, -1, 1>(sigma_s_1dim__);
      stan::math::fill(sigma_s, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_s_flat__;
        current_statement__ = 12;
        assign(sigma_s_flat__, nil_index_list(), context__.vals_r("sigma_s"),
          "assigning variable sigma_s_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
          current_statement__ = 12;
          assign(sigma_s, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_s_flat__[(pos__ - 1)], "assigning variable sigma_s");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_s_free__;
      sigma_s_free__ = Eigen::Matrix<double, -1, 1>(sigma_s_1dim__);
      stan::math::fill(sigma_s_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(sigma_s_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_s[(sym1__ - 1)], 0),
          "assigning variable sigma_s_free__");}
      Eigen::Matrix<double, -1, -1> t_raw;
      t_raw = Eigen::Matrix<double, -1, -1>(t_raw_1dim__, t_raw_2dim__);
      stan::math::fill(t_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> t_raw_flat__;
        current_statement__ = 13;
        assign(t_raw_flat__, nil_index_list(), context__.vals_r("t_raw"),
          "assigning variable t_raw_flat__");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= t_raw_2dim__; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= t_raw_1dim__; ++sym2__) {
            current_statement__ = 13;
            assign(t_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              t_raw_flat__[(pos__ - 1)], "assigning variable t_raw");
            current_statement__ = 13;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> sigma_t;
      sigma_t = Eigen::Matrix<double, -1, 1>(sigma_t_1dim__);
      stan::math::fill(sigma_t, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_t_flat__;
        current_statement__ = 14;
        assign(sigma_t_flat__, nil_index_list(), context__.vals_r("sigma_t"),
          "assigning variable sigma_t_flat__");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
          current_statement__ = 14;
          assign(sigma_t, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_t_flat__[(pos__ - 1)], "assigning variable sigma_t");
          current_statement__ = 14;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_t_free__;
      sigma_t_free__ = Eigen::Matrix<double, -1, 1>(sigma_t_1dim__);
      stan::math::fill(sigma_t_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
        current_statement__ = 14;
        assign(sigma_t_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_t[(sym1__ - 1)], 0),
          "assigning variable sigma_t_free__");}
      Eigen::Matrix<double, -1, 1> w;
      w = Eigen::Matrix<double, -1, 1>(w_1dim__);
      stan::math::fill(w, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 15;
        assign(w_flat__, nil_index_list(), context__.vals_r("w"),
          "assigning variable w_flat__");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
          current_statement__ = 15;
          assign(w, cons_list(index_uni(sym1__), nil_index_list()),
            w_flat__[(pos__ - 1)], "assigning variable w");
          current_statement__ = 15;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> w_free__;
      w_free__ = Eigen::Matrix<double, -1, 1>(w_1dim__);
      stan::math::fill(w_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
        current_statement__ = 15;
        assign(w_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(w[(sym1__ - 1)], 0.001, 0.999),
          "assigning variable w_free__");}
      Eigen::Matrix<double, -1, 1> p;
      p = Eigen::Matrix<double, -1, 1>(p_1dim__);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 16;
        assign(p_flat__, nil_index_list(), context__.vals_r("p"),
          "assigning variable p_flat__");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
          current_statement__ = 16;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            p_flat__[(pos__ - 1)], "assigning variable p");
          current_statement__ = 16;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> p_free__;
      p_free__ = Eigen::Matrix<double, -1, 1>(p_1dim__);
      stan::math::fill(p_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
        current_statement__ = 16;
        assign(p_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(p[(sym1__ - 1)], 0.001, 0.999),
          "assigning variable p_free__");}
      Eigen::Matrix<double, -1, 1> gamma_p0;
      gamma_p0 = Eigen::Matrix<double, -1, 1>(gamma_p0_1dim__);
      stan::math::fill(gamma_p0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_p0_flat__;
        current_statement__ = 17;
        assign(gamma_p0_flat__, nil_index_list(),
          context__.vals_r("gamma_p0"), "assigning variable gamma_p0_flat__");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= gamma_p0_1dim__; ++sym1__) {
          current_statement__ = 17;
          assign(gamma_p0, cons_list(index_uni(sym1__), nil_index_list()),
            gamma_p0_flat__[(pos__ - 1)], "assigning variable gamma_p0");
          current_statement__ = 17;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gamma_p1;
      gamma_p1 = Eigen::Matrix<double, -1, 1>(gamma_p1_1dim__);
      stan::math::fill(gamma_p1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_p1_flat__;
        current_statement__ = 18;
        assign(gamma_p1_flat__, nil_index_list(),
          context__.vals_r("gamma_p1"), "assigning variable gamma_p1_flat__");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= gamma_p1_1dim__; ++sym1__) {
          current_statement__ = 18;
          assign(gamma_p1, cons_list(index_uni(sym1__), nil_index_list()),
            gamma_p1_flat__[(pos__ - 1)], "assigning variable gamma_p1");
          current_statement__ = 18;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gamma0_p0;
      gamma0_p0 = Eigen::Matrix<double, -1, 1>(gamma0_p0_1dim__);
      stan::math::fill(gamma0_p0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma0_p0_flat__;
        current_statement__ = 19;
        assign(gamma0_p0_flat__, nil_index_list(),
          context__.vals_r("gamma0_p0"),
          "assigning variable gamma0_p0_flat__");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= gamma0_p0_1dim__; ++sym1__) {
          current_statement__ = 19;
          assign(gamma0_p0, cons_list(index_uni(sym1__), nil_index_list()),
            gamma0_p0_flat__[(pos__ - 1)], "assigning variable gamma0_p0");
          current_statement__ = 19;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gamma0_p1;
      gamma0_p1 = Eigen::Matrix<double, -1, 1>(gamma0_p1_1dim__);
      stan::math::fill(gamma0_p1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma0_p1_flat__;
        current_statement__ = 20;
        assign(gamma0_p1_flat__, nil_index_list(),
          context__.vals_r("gamma0_p1"),
          "assigning variable gamma0_p1_flat__");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= gamma0_p1_1dim__; ++sym1__) {
          current_statement__ = 20;
          assign(gamma0_p1, cons_list(index_uni(sym1__), nil_index_list()),
            gamma0_p1_flat__[(pos__ - 1)], "assigning variable gamma0_p1");
          current_statement__ = 20;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= beta0_1dim__; ++sym1__) {
        vars__.emplace_back(beta0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        vars__.emplace_back(z_beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
        vars__.emplace_back(lambda_HS_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
        vars__.emplace_back(z_c2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
        vars__.emplace_back(z_tau_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
        vars__.emplace_back(v_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_v_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
        vars__.emplace_back(nu_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
        vars__.emplace_back(psi_d_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
        vars__.emplace_back(lambda_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= s_raw_1dim__; ++sym1__) {
        vars__.emplace_back(s_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_s_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= t_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= t_raw_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(t_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "t_raw"));}}
      for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_t_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
        vars__.emplace_back(w_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
        vars__.emplace_back(p_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma_p0_1dim__; ++sym1__) {
        vars__.emplace_back(gamma_p0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma_p1_1dim__; ++sym1__) {
        vars__.emplace_back(gamma_p1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma0_p0_1dim__; ++sym1__) {
        vars__.emplace_back(gamma0_p0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma0_p1_1dim__; ++sym1__) {
        vars__.emplace_back(gamma0_p1[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta0");
    names__.emplace_back("z_beta");
    names__.emplace_back("lambda_HS");
    names__.emplace_back("z_c2");
    names__.emplace_back("z_tau");
    names__.emplace_back("v_raw");
    names__.emplace_back("sigma_v");
    names__.emplace_back("nu");
    names__.emplace_back("psi_d");
    names__.emplace_back("lambda");
    names__.emplace_back("s_raw");
    names__.emplace_back("sigma_s");
    names__.emplace_back("t_raw");
    names__.emplace_back("sigma_t");
    names__.emplace_back("w");
    names__.emplace_back("p");
    names__.emplace_back("gamma_p0");
    names__.emplace_back("gamma_p1");
    names__.emplace_back("gamma0_p0");
    names__.emplace_back("gamma0_p1");
    names__.emplace_back("beta");
    names__.emplace_back("tau");
    names__.emplace_back("c2");
    names__.emplace_back("lambda_tilde");
    names__.emplace_back("theta");
    names__.emplace_back("b1");
    names__.emplace_back("a1");
    names__.emplace_back("mu");
    names__.emplace_back("phi");
    names__.emplace_back("lambda1");
    names__.emplace_back("lambda2");
    names__.emplace_back("b2");
    names__.emplace_back("a2");
    names__.emplace_back("p0");
    names__.emplace_back("p1");
    names__.emplace_back("v");
    names__.emplace_back("s");
    names__.emplace_back("t");
    names__.emplace_back("reffs");
    names__.emplace_back("reffs_oos");
    names__.emplace_back("log_lik");
    names__.emplace_back("y_rep");
    names__.emplace_back("psi_OOS");
    names__.emplace_back("v_oos");
    names__.emplace_back("label_mixt");
    names__.emplace_back("probs");
    names__.emplace_back("theta_oos");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(beta0_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(P)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lambda_HS_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(z_c2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(z_tau_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(length_v)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_v_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nu_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(psi_d_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lambda_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(s_raw_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_s_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(t_raw_1dim__)
                                             ,
                                             static_cast<size_t>(t_raw_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_t_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(w_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gamma_p0_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gamma_p1_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gamma0_p0_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gamma0_p1_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(P)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(tau_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(c2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lambda_tilde_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_is)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_is)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_is)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_is)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lambda1_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lambda2_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(b2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(a2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p0_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p1_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(length_v)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(s_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(t_1dim__),
                                             static_cast<size_t>(t_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_is)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_oos)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_is)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_is)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(probs_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(theta_oos_1dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= beta0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_HS" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_c2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_tau" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "v_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_v" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_d" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= s_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "s_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_s" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= t_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= t_raw_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "t_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_t" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma_p0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_p0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma_p1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_p1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma0_p0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma0_p0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma0_p1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma0_p1" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= c2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= lambda_tilde_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda_tilde" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= b2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p0" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "v" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "s" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= t_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= t_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "t" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "reffs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_oos; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "reffs_oos" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_OOS" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "v_oos" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "label_mixt");
      for (int sym1__ = 1; sym1__ <= probs_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "probs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= theta_oos_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_oos" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= beta0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_HS" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_c2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_tau" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "v_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_v" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_d" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= s_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "s_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_s" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= t_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= t_raw_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "t_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_t" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma_p0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_p0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma_p1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_p1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma0_p0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma0_p0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma0_p1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma0_p1" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= c2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= lambda_tilde_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda_tilde" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= b2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p0" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "v" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "s" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= t_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= t_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "t" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "reffs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_oos; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "reffs_oos" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_OOS" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "v_oos" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "label_mixt");
      for (int sym1__ = 1; sym1__ <= probs_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "probs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= theta_oos_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_oos" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta0\",\"type\":{\"name\":\"vector\",\"length\":" << beta0_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"z_beta\",\"type\":{\"name\":\"vector\",\"length\":" << P << "},\"block\":\"parameters\"},{\"name\":\"lambda_HS\",\"type\":{\"name\":\"vector\",\"length\":" << lambda_HS_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"z_c2\",\"type\":{\"name\":\"vector\",\"length\":" << z_c2_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"z_tau\",\"type\":{\"name\":\"vector\",\"length\":" << z_tau_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"v_raw\",\"type\":{\"name\":\"vector\",\"length\":" << length_v << "},\"block\":\"parameters\"},{\"name\":\"sigma_v\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_v_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" << nu_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"psi_d\",\"type\":{\"name\":\"vector\",\"length\":" << psi_d_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << lambda_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"s_raw\",\"type\":{\"name\":\"vector\",\"length\":" << s_raw_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma_s\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_s_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"t_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << t_raw_1dim__ << ",\"cols\":" << t_raw_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_t_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" << w_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" << p_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma_p0\",\"type\":{\"name\":\"vector\",\"length\":" << gamma_p0_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma_p1\",\"type\":{\"name\":\"vector\",\"length\":" << gamma_p1_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma0_p0\",\"type\":{\"name\":\"vector\",\"length\":" << gamma0_p0_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma0_p1\",\"type\":{\"name\":\"vector\",\"length\":" << gamma0_p1_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << P << "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" << tau_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"vector\",\"length\":" << c2_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << lambda_tilde_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" << phi_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda1\",\"type\":{\"name\":\"vector\",\"length\":" << lambda1_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"vector\",\"length\":" << lambda2_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"vector\",\"length\":" << b2_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"vector\",\"length\":" << a2_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"vector\",\"length\":" << p0_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"p1\",\"type\":{\"name\":\"vector\",\"length\":" << p1_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" << length_v << "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" << s_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"t\",\"type\":{\"name\":\"matrix\",\"rows\":" << t_1dim__ << ",\"cols\":" << t_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"reffs\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"reffs_oos\",\"type\":{\"name\":\"vector\",\"length\":" << M_oos << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"generated_quantities\"},{\"name\":\"psi_OOS\",\"type\":{\"name\":\"array\",\"length\":" << 1 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"v_oos\",\"type\":{\"name\":\"array\",\"length\":" << 1 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"label_mixt\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"probs\",\"type\":{\"name\":\"vector\",\"length\":" << probs_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"theta_oos\",\"type\":{\"name\":\"vector\",\"length\":" << theta_oos_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta0\",\"type\":{\"name\":\"vector\",\"length\":" << beta0_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"z_beta\",\"type\":{\"name\":\"vector\",\"length\":" << P << "},\"block\":\"parameters\"},{\"name\":\"lambda_HS\",\"type\":{\"name\":\"vector\",\"length\":" << lambda_HS_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"z_c2\",\"type\":{\"name\":\"vector\",\"length\":" << z_c2_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"z_tau\",\"type\":{\"name\":\"vector\",\"length\":" << z_tau_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"v_raw\",\"type\":{\"name\":\"vector\",\"length\":" << length_v << "},\"block\":\"parameters\"},{\"name\":\"sigma_v\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_v_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" << nu_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"psi_d\",\"type\":{\"name\":\"vector\",\"length\":" << psi_d_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << lambda_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"s_raw\",\"type\":{\"name\":\"vector\",\"length\":" << s_raw_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma_s\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_s_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"t_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << t_raw_1dim__ << ",\"cols\":" << t_raw_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_t_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" << w_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" << p_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma_p0\",\"type\":{\"name\":\"vector\",\"length\":" << gamma_p0_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma_p1\",\"type\":{\"name\":\"vector\",\"length\":" << gamma_p1_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma0_p0\",\"type\":{\"name\":\"vector\",\"length\":" << gamma0_p0_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma0_p1\",\"type\":{\"name\":\"vector\",\"length\":" << gamma0_p1_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << P << "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" << tau_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"vector\",\"length\":" << c2_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << lambda_tilde_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" << phi_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda1\",\"type\":{\"name\":\"vector\",\"length\":" << lambda1_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"vector\",\"length\":" << lambda2_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"vector\",\"length\":" << b2_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"vector\",\"length\":" << a2_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"vector\",\"length\":" << p0_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"p1\",\"type\":{\"name\":\"vector\",\"length\":" << p1_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" << length_v << "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" << s_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"t\",\"type\":{\"name\":\"matrix\",\"rows\":" << t_1dim__ << ",\"cols\":" << t_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"reffs\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"transformed_parameters\"},{\"name\":\"reffs_oos\",\"type\":{\"name\":\"vector\",\"length\":" << M_oos << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" << M_is << "},\"block\":\"generated_quantities\"},{\"name\":\"psi_OOS\",\"type\":{\"name\":\"array\",\"length\":" << 1 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"v_oos\",\"type\":{\"name\":\"array\",\"length\":" << 1 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"label_mixt\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"probs\",\"type\":{\"name\":\"vector\",\"length\":" << probs_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"theta_oos\",\"type\":{\"name\":\"vector\",\"length\":" << theta_oos_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_global_namespace::model_global;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_global_namespace::profiles__;
}
#endif
#endif
